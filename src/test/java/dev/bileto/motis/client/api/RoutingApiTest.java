/*
 * MOTIS API
 * This is the MOTIS routing API.
 *
 * The version of the OpenAPI document: v4
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.bileto.motis.client.api;

import java.math.BigDecimal;
import dev.bileto.motis.client.model.Duration;
import dev.bileto.motis.client.model.ElevationCosts;
import dev.bileto.motis.client.model.Mode;
import java.time.OffsetDateTime;
import dev.bileto.motis.client.model.PedestrianProfile;
import dev.bileto.motis.client.model.Plan200Response;
import dev.bileto.motis.client.model.Reachable;
import dev.bileto.motis.client.model.RentalFormFactor;
import dev.bileto.motis.client.model.RentalPropulsionType;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for RoutingApi
 */
@Disabled
public class RoutingApiTest {

    private final RoutingApi api = new RoutingApi();

    
    /**
     * Computes all reachable locations from a given stop within a set duration. Each result entry will contain the fastest travel duration and the number of connections used. 
     *
     * 
     */
    @Test
    public void oneToAllTest()  {
        // uncomment below to test the function
        //String one = null;
        //Integer maxTravelTime = null;
        //OffsetDateTime time = null;
        //Boolean arriveBy = null;
        //Integer maxTransfers = null;
        //Integer minTransferTime = null;
        //Integer additionalTransferTime = null;
        //BigDecimal transferTimeFactor = null;
        //BigDecimal maxMatchingDistance = null;
        //Boolean useRoutedTransfers = null;
        //PedestrianProfile pedestrianProfile = null;
        //ElevationCosts elevationCosts = null;
        //List<Mode> transitModes = null;
        //List<Mode> preTransitModes = null;
        //List<Mode> postTransitModes = null;
        //Boolean requireBikeTransport = null;
        //Boolean requireCarTransport = null;
        //Integer maxPreTransitTime = null;
        //Integer maxPostTransitTime = null;
        //Reachable response = api.oneToAll(one, maxTravelTime, time, arriveBy, maxTransfers, minTransferTime, additionalTransferTime, transferTimeFactor, maxMatchingDistance, useRoutedTransfers, pedestrianProfile, elevationCosts, transitModes, preTransitModes, postTransitModes, requireBikeTransport, requireCarTransport, maxPreTransitTime, maxPostTransitTime);

        // TODO: test validations
    }
    
    /**
     * Street routing from one to many places or many to one. The order in the response array corresponds to the order of coordinates of the \\&#x60;many\\&#x60; parameter in the query. 
     *
     * 
     */
    @Test
    public void oneToManyTest()  {
        // uncomment below to test the function
        //String one = null;
        //List<String> many = null;
        //Mode mode = null;
        //BigDecimal max = null;
        //BigDecimal maxMatchingDistance = null;
        //Boolean arriveBy = null;
        //ElevationCosts elevationCosts = null;
        //List<Duration> response = api.oneToMany(one, many, mode, max, maxMatchingDistance, arriveBy, elevationCosts);

        // TODO: test validations
    }
    
    /**
     * Computes optimal connections from one place to another.
     *
     * 
     */
    @Test
    public void planTest()  {
        // uncomment below to test the function
        //String fromPlace = null;
        //String toPlace = null;
        //Boolean detailedTransfers = null;
        //List<String> via = null;
        //List<Integer> viaMinimumStay = null;
        //OffsetDateTime time = null;
        //Integer maxTransfers = null;
        //Integer maxTravelTime = null;
        //Integer minTransferTime = null;
        //Integer additionalTransferTime = null;
        //BigDecimal transferTimeFactor = null;
        //BigDecimal maxMatchingDistance = null;
        //PedestrianProfile pedestrianProfile = null;
        //ElevationCosts elevationCosts = null;
        //Boolean useRoutedTransfers = null;
        //Boolean joinInterlinedLegs = null;
        //List<Mode> transitModes = null;
        //List<Mode> directModes = null;
        //List<Mode> preTransitModes = null;
        //List<Mode> postTransitModes = null;
        //List<RentalFormFactor> directRentalFormFactors = null;
        //List<RentalFormFactor> preTransitRentalFormFactors = null;
        //List<RentalFormFactor> postTransitRentalFormFactors = null;
        //List<RentalPropulsionType> directRentalPropulsionTypes = null;
        //List<RentalPropulsionType> preTransitRentalPropulsionTypes = null;
        //List<RentalPropulsionType> postTransitRentalPropulsionTypes = null;
        //List<String> directRentalProviders = null;
        //List<String> preTransitRentalProviders = null;
        //List<String> postTransitRentalProviders = null;
        //Boolean ignoreDirectRentalReturnConstraints = null;
        //Boolean ignorePreTransitRentalReturnConstraints = null;
        //Boolean ignorePostTransitRentalReturnConstraints = null;
        //Integer numItineraries = null;
        //String pageCursor = null;
        //Boolean timetableView = null;
        //Boolean arriveBy = null;
        //Integer searchWindow = null;
        //Boolean requireBikeTransport = null;
        //Boolean requireCarTransport = null;
        //Integer maxPreTransitTime = null;
        //Integer maxPostTransitTime = null;
        //Integer maxDirectTime = null;
        //BigDecimal fastestDirectFactor = null;
        //Integer timeout = null;
        //Integer passengers = null;
        //Integer luggage = null;
        //Boolean slowDirect = null;
        //BigDecimal fastestSlowDirectFactor = null;
        //Boolean withFares = null;
        //Boolean withScheduledSkippedStops = null;
        //String language = null;
        //String algorithm = null;
        //Plan200Response response = api.plan(fromPlace, toPlace, detailedTransfers, via, viaMinimumStay, time, maxTransfers, maxTravelTime, minTransferTime, additionalTransferTime, transferTimeFactor, maxMatchingDistance, pedestrianProfile, elevationCosts, useRoutedTransfers, joinInterlinedLegs, transitModes, directModes, preTransitModes, postTransitModes, directRentalFormFactors, preTransitRentalFormFactors, postTransitRentalFormFactors, directRentalPropulsionTypes, preTransitRentalPropulsionTypes, postTransitRentalPropulsionTypes, directRentalProviders, preTransitRentalProviders, postTransitRentalProviders, ignoreDirectRentalReturnConstraints, ignorePreTransitRentalReturnConstraints, ignorePostTransitRentalReturnConstraints, numItineraries, pageCursor, timetableView, arriveBy, searchWindow, requireBikeTransport, requireCarTransport, maxPreTransitTime, maxPostTransitTime, maxDirectTime, fastestDirectFactor, timeout, passengers, luggage, slowDirect, fastestSlowDirectFactor, withFares, withScheduledSkippedStops, language, algorithm);

        // TODO: test validations
    }
    
}
