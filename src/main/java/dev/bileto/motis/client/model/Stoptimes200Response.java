/*
 * MOTIS API
 * This is the MOTIS routing API.
 *
 * The version of the OpenAPI document: v4
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.bileto.motis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.bileto.motis.client.model.Place;
import dev.bileto.motis.client.model.StopTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Stoptimes200Response
 */
@JsonPropertyOrder({
  Stoptimes200Response.JSON_PROPERTY_STOP_TIMES,
  Stoptimes200Response.JSON_PROPERTY_PLACE,
  Stoptimes200Response.JSON_PROPERTY_PREVIOUS_PAGE_CURSOR,
  Stoptimes200Response.JSON_PROPERTY_NEXT_PAGE_CURSOR
})
@JsonTypeName("stoptimes_200_response")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class Stoptimes200Response {
  public static final String JSON_PROPERTY_STOP_TIMES = "stopTimes";
  @jakarta.annotation.Nonnull
  private List<StopTime> stopTimes = new ArrayList<>();

  public static final String JSON_PROPERTY_PLACE = "place";
  @jakarta.annotation.Nonnull
  private Place place;

  public static final String JSON_PROPERTY_PREVIOUS_PAGE_CURSOR = "previousPageCursor";
  @jakarta.annotation.Nonnull
  private String previousPageCursor;

  public static final String JSON_PROPERTY_NEXT_PAGE_CURSOR = "nextPageCursor";
  @jakarta.annotation.Nonnull
  private String nextPageCursor;

  public Stoptimes200Response() {
  }

  public Stoptimes200Response stopTimes(@jakarta.annotation.Nonnull List<StopTime> stopTimes) {
    
    this.stopTimes = stopTimes;
    return this;
  }

  public Stoptimes200Response addStopTimesItem(StopTime stopTimesItem) {
    if (this.stopTimes == null) {
      this.stopTimes = new ArrayList<>();
    }
    this.stopTimes.add(stopTimesItem);
    return this;
  }

  /**
   * list of stop times
   * @return stopTimes
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STOP_TIMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<StopTime> getStopTimes() {
    return stopTimes;
  }


  @JsonProperty(JSON_PROPERTY_STOP_TIMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStopTimes(@jakarta.annotation.Nonnull List<StopTime> stopTimes) {
    this.stopTimes = stopTimes;
  }

  public Stoptimes200Response place(@jakarta.annotation.Nonnull Place place) {
    
    this.place = place;
    return this;
  }

  /**
   * metadata of the requested stop
   * @return place
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Place getPlace() {
    return place;
  }


  @JsonProperty(JSON_PROPERTY_PLACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlace(@jakarta.annotation.Nonnull Place place) {
    this.place = place;
  }

  public Stoptimes200Response previousPageCursor(@jakarta.annotation.Nonnull String previousPageCursor) {
    
    this.previousPageCursor = previousPageCursor;
    return this;
  }

  /**
   * Use the cursor to get the previous page of results. Insert the cursor into the request and post it to get the previous page. The previous page is a set of stop times BEFORE the first stop time in the result. 
   * @return previousPageCursor
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PREVIOUS_PAGE_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPreviousPageCursor() {
    return previousPageCursor;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_PAGE_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreviousPageCursor(@jakarta.annotation.Nonnull String previousPageCursor) {
    this.previousPageCursor = previousPageCursor;
  }

  public Stoptimes200Response nextPageCursor(@jakarta.annotation.Nonnull String nextPageCursor) {
    
    this.nextPageCursor = nextPageCursor;
    return this;
  }

  /**
   * Use the cursor to get the next page of results. Insert the cursor into the request and post it to get the next page. The next page is a set of stop times AFTER the last stop time in this result. 
   * @return nextPageCursor
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNextPageCursor() {
    return nextPageCursor;
  }


  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNextPageCursor(@jakarta.annotation.Nonnull String nextPageCursor) {
    this.nextPageCursor = nextPageCursor;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stoptimes200Response stoptimes200Response = (Stoptimes200Response) o;
    return Objects.equals(this.stopTimes, stoptimes200Response.stopTimes) &&
        Objects.equals(this.place, stoptimes200Response.place) &&
        Objects.equals(this.previousPageCursor, stoptimes200Response.previousPageCursor) &&
        Objects.equals(this.nextPageCursor, stoptimes200Response.nextPageCursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stopTimes, place, previousPageCursor, nextPageCursor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stoptimes200Response {\n");
    sb.append("    stopTimes: ").append(toIndentedString(stopTimes)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    previousPageCursor: ").append(toIndentedString(previousPageCursor)).append("\n");
    sb.append("    nextPageCursor: ").append(toIndentedString(nextPageCursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

