/*
 * MOTIS API
 * This is the MOTIS routing API.  Overview of MOTIS API versions:  MOTIS 0.x - deprecated/discontinued  MOTIS 2.x - current, providing:  * /api/v5/{plan,trip,stoptimes,map/trips} renamed METRO mode to SUBURBAN, AREAL_LIFT to AERIAL_LIFT; since MOTIS 2.5.0 * /api/v4/{plan,trip,stoptimes,map/trips} new displayName property, routeShortName only contains actual route short name from source; since MOTIS 2.2.0 * /api/v3/plan with correct maxTransfers API parameter (transfers actually corresponding to number of changes between transit legs (and not to number of transit legs), i.e. maxTransfers=0 returns direct public transit connections, as expected); since MOTIS 2.0.84  * /api/v2/{plan,trip} returns Google polylines with precision=6; since MOTIS 2.0.60 * /api/v1/{plan,trip} returns Google polylines with precision=7 (not defined for |longitude|>107) * /api/v1/_* all other endpoints  If you use the JS client lib https://www.npmjs.com/package/@motis-project/motis-client, endpoint versions will be taken into account automatically (i.e. the newest one available will be used). 
 *
 * The version of the OpenAPI document: v5
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.bileto.motis.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.bileto.motis.client.model.Place;
import dev.bileto.motis.client.model.Transfer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Transfers200Response
 */
@JsonPropertyOrder({
  Transfers200Response.JSON_PROPERTY_PLACE,
  Transfers200Response.JSON_PROPERTY_ROOT,
  Transfers200Response.JSON_PROPERTY_EQUIVALENCES,
  Transfers200Response.JSON_PROPERTY_HAS_FOOT_TRANSFERS,
  Transfers200Response.JSON_PROPERTY_HAS_WHEELCHAIR_TRANSFERS,
  Transfers200Response.JSON_PROPERTY_HAS_CAR_TRANSFERS,
  Transfers200Response.JSON_PROPERTY_TRANSFERS
})
@JsonTypeName("transfers_200_response")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class Transfers200Response {
  public static final String JSON_PROPERTY_PLACE = "place";
  @jakarta.annotation.Nonnull
  private Place place;

  public static final String JSON_PROPERTY_ROOT = "root";
  @jakarta.annotation.Nonnull
  private Place root;

  public static final String JSON_PROPERTY_EQUIVALENCES = "equivalences";
  @jakarta.annotation.Nonnull
  private List<Place> equivalences = new ArrayList<>();

  public static final String JSON_PROPERTY_HAS_FOOT_TRANSFERS = "hasFootTransfers";
  @jakarta.annotation.Nonnull
  private Boolean hasFootTransfers;

  public static final String JSON_PROPERTY_HAS_WHEELCHAIR_TRANSFERS = "hasWheelchairTransfers";
  @jakarta.annotation.Nonnull
  private Boolean hasWheelchairTransfers;

  public static final String JSON_PROPERTY_HAS_CAR_TRANSFERS = "hasCarTransfers";
  @jakarta.annotation.Nonnull
  private Boolean hasCarTransfers;

  public static final String JSON_PROPERTY_TRANSFERS = "transfers";
  @jakarta.annotation.Nonnull
  private List<Transfer> transfers = new ArrayList<>();

  public Transfers200Response() {
  }

  public Transfers200Response place(@jakarta.annotation.Nonnull Place place) {
    
    this.place = place;
    return this;
  }

  /**
   * Get place
   * @return place
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_PLACE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Place getPlace() {
    return place;
  }


  @JsonProperty(value = JSON_PROPERTY_PLACE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlace(@jakarta.annotation.Nonnull Place place) {
    this.place = place;
  }

  public Transfers200Response root(@jakarta.annotation.Nonnull Place root) {
    
    this.root = root;
    return this;
  }

  /**
   * Get root
   * @return root
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_ROOT, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Place getRoot() {
    return root;
  }


  @JsonProperty(value = JSON_PROPERTY_ROOT, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRoot(@jakarta.annotation.Nonnull Place root) {
    this.root = root;
  }

  public Transfers200Response equivalences(@jakarta.annotation.Nonnull List<Place> equivalences) {
    
    this.equivalences = equivalences;
    return this;
  }

  public Transfers200Response addEquivalencesItem(Place equivalencesItem) {
    if (this.equivalences == null) {
      this.equivalences = new ArrayList<>();
    }
    this.equivalences.add(equivalencesItem);
    return this;
  }

  /**
   * Get equivalences
   * @return equivalences
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_EQUIVALENCES, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Place> getEquivalences() {
    return equivalences;
  }


  @JsonProperty(value = JSON_PROPERTY_EQUIVALENCES, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEquivalences(@jakarta.annotation.Nonnull List<Place> equivalences) {
    this.equivalences = equivalences;
  }

  public Transfers200Response hasFootTransfers(@jakarta.annotation.Nonnull Boolean hasFootTransfers) {
    
    this.hasFootTransfers = hasFootTransfers;
    return this;
  }

  /**
   * true if the server has foot transfers computed
   * @return hasFootTransfers
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_HAS_FOOT_TRANSFERS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHasFootTransfers() {
    return hasFootTransfers;
  }


  @JsonProperty(value = JSON_PROPERTY_HAS_FOOT_TRANSFERS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasFootTransfers(@jakarta.annotation.Nonnull Boolean hasFootTransfers) {
    this.hasFootTransfers = hasFootTransfers;
  }

  public Transfers200Response hasWheelchairTransfers(@jakarta.annotation.Nonnull Boolean hasWheelchairTransfers) {
    
    this.hasWheelchairTransfers = hasWheelchairTransfers;
    return this;
  }

  /**
   * true if the server has wheelchair transfers computed
   * @return hasWheelchairTransfers
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_HAS_WHEELCHAIR_TRANSFERS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHasWheelchairTransfers() {
    return hasWheelchairTransfers;
  }


  @JsonProperty(value = JSON_PROPERTY_HAS_WHEELCHAIR_TRANSFERS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasWheelchairTransfers(@jakarta.annotation.Nonnull Boolean hasWheelchairTransfers) {
    this.hasWheelchairTransfers = hasWheelchairTransfers;
  }

  public Transfers200Response hasCarTransfers(@jakarta.annotation.Nonnull Boolean hasCarTransfers) {
    
    this.hasCarTransfers = hasCarTransfers;
    return this;
  }

  /**
   * true if the server has car transfers computed
   * @return hasCarTransfers
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_HAS_CAR_TRANSFERS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHasCarTransfers() {
    return hasCarTransfers;
  }


  @JsonProperty(value = JSON_PROPERTY_HAS_CAR_TRANSFERS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasCarTransfers(@jakarta.annotation.Nonnull Boolean hasCarTransfers) {
    this.hasCarTransfers = hasCarTransfers;
  }

  public Transfers200Response transfers(@jakarta.annotation.Nonnull List<Transfer> transfers) {
    
    this.transfers = transfers;
    return this;
  }

  public Transfers200Response addTransfersItem(Transfer transfersItem) {
    if (this.transfers == null) {
      this.transfers = new ArrayList<>();
    }
    this.transfers.add(transfersItem);
    return this;
  }

  /**
   * all outgoing transfers of this location
   * @return transfers
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_TRANSFERS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Transfer> getTransfers() {
    return transfers;
  }


  @JsonProperty(value = JSON_PROPERTY_TRANSFERS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransfers(@jakarta.annotation.Nonnull List<Transfer> transfers) {
    this.transfers = transfers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transfers200Response transfers200Response = (Transfers200Response) o;
    return Objects.equals(this.place, transfers200Response.place) &&
        Objects.equals(this.root, transfers200Response.root) &&
        Objects.equals(this.equivalences, transfers200Response.equivalences) &&
        Objects.equals(this.hasFootTransfers, transfers200Response.hasFootTransfers) &&
        Objects.equals(this.hasWheelchairTransfers, transfers200Response.hasWheelchairTransfers) &&
        Objects.equals(this.hasCarTransfers, transfers200Response.hasCarTransfers) &&
        Objects.equals(this.transfers, transfers200Response.transfers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(place, root, equivalences, hasFootTransfers, hasWheelchairTransfers, hasCarTransfers, transfers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transfers200Response {\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("    equivalences: ").append(toIndentedString(equivalences)).append("\n");
    sb.append("    hasFootTransfers: ").append(toIndentedString(hasFootTransfers)).append("\n");
    sb.append("    hasWheelchairTransfers: ").append(toIndentedString(hasWheelchairTransfers)).append("\n");
    sb.append("    hasCarTransfers: ").append(toIndentedString(hasCarTransfers)).append("\n");
    sb.append("    transfers: ").append(toIndentedString(transfers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

