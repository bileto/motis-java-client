/*
 * MOTIS API
 * This is the MOTIS routing API.
 *
 * The version of the OpenAPI document: v4
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.bileto.motis.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.bileto.motis.client.model.Mode;
import dev.bileto.motis.client.model.Place;
import dev.bileto.motis.client.model.TripInfo;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * trip segment between two stops to show a trip on a map
 */
@JsonPropertyOrder({
  TripSegment.JSON_PROPERTY_TRIPS,
  TripSegment.JSON_PROPERTY_ROUTE_COLOR,
  TripSegment.JSON_PROPERTY_MODE,
  TripSegment.JSON_PROPERTY_DISTANCE,
  TripSegment.JSON_PROPERTY_FROM,
  TripSegment.JSON_PROPERTY_TO,
  TripSegment.JSON_PROPERTY_DEPARTURE,
  TripSegment.JSON_PROPERTY_ARRIVAL,
  TripSegment.JSON_PROPERTY_SCHEDULED_DEPARTURE,
  TripSegment.JSON_PROPERTY_SCHEDULED_ARRIVAL,
  TripSegment.JSON_PROPERTY_REAL_TIME,
  TripSegment.JSON_PROPERTY_POLYLINE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class TripSegment {
  public static final String JSON_PROPERTY_TRIPS = "trips";
  @jakarta.annotation.Nonnull
  private List<TripInfo> trips = new ArrayList<>();

  public static final String JSON_PROPERTY_ROUTE_COLOR = "routeColor";
  @jakarta.annotation.Nullable
  private String routeColor;

  public static final String JSON_PROPERTY_MODE = "mode";
  @jakarta.annotation.Nonnull
  private Mode mode;

  public static final String JSON_PROPERTY_DISTANCE = "distance";
  @jakarta.annotation.Nonnull
  private BigDecimal distance;

  public static final String JSON_PROPERTY_FROM = "from";
  @jakarta.annotation.Nonnull
  private Place from;

  public static final String JSON_PROPERTY_TO = "to";
  @jakarta.annotation.Nonnull
  private Place to;

  public static final String JSON_PROPERTY_DEPARTURE = "departure";
  @jakarta.annotation.Nonnull
  private OffsetDateTime departure;

  public static final String JSON_PROPERTY_ARRIVAL = "arrival";
  @jakarta.annotation.Nonnull
  private OffsetDateTime arrival;

  public static final String JSON_PROPERTY_SCHEDULED_DEPARTURE = "scheduledDeparture";
  @jakarta.annotation.Nonnull
  private OffsetDateTime scheduledDeparture;

  public static final String JSON_PROPERTY_SCHEDULED_ARRIVAL = "scheduledArrival";
  @jakarta.annotation.Nonnull
  private OffsetDateTime scheduledArrival;

  public static final String JSON_PROPERTY_REAL_TIME = "realTime";
  @jakarta.annotation.Nonnull
  private Boolean realTime;

  public static final String JSON_PROPERTY_POLYLINE = "polyline";
  @jakarta.annotation.Nonnull
  private String polyline;

  public TripSegment() {
  }

  public TripSegment trips(@jakarta.annotation.Nonnull List<TripInfo> trips) {
    
    this.trips = trips;
    return this;
  }

  public TripSegment addTripsItem(TripInfo tripsItem) {
    if (this.trips == null) {
      this.trips = new ArrayList<>();
    }
    this.trips.add(tripsItem);
    return this;
  }

  /**
   * Get trips
   * @return trips
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_TRIPS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TripInfo> getTrips() {
    return trips;
  }


  @JsonProperty(value = JSON_PROPERTY_TRIPS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrips(@jakarta.annotation.Nonnull List<TripInfo> trips) {
    this.trips = trips;
  }

  public TripSegment routeColor(@jakarta.annotation.Nullable String routeColor) {
    
    this.routeColor = routeColor;
    return this;
  }

  /**
   * Get routeColor
   * @return routeColor
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ROUTE_COLOR, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRouteColor() {
    return routeColor;
  }


  @JsonProperty(value = JSON_PROPERTY_ROUTE_COLOR, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRouteColor(@jakarta.annotation.Nullable String routeColor) {
    this.routeColor = routeColor;
  }

  public TripSegment mode(@jakarta.annotation.Nonnull Mode mode) {
    
    this.mode = mode;
    return this;
  }

  /**
   * Transport mode for this leg
   * @return mode
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_MODE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Mode getMode() {
    return mode;
  }


  @JsonProperty(value = JSON_PROPERTY_MODE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMode(@jakarta.annotation.Nonnull Mode mode) {
    this.mode = mode;
  }

  public TripSegment distance(@jakarta.annotation.Nonnull BigDecimal distance) {
    
    this.distance = distance;
    return this;
  }

  /**
   * distance in meters
   * @return distance
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_DISTANCE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getDistance() {
    return distance;
  }


  @JsonProperty(value = JSON_PROPERTY_DISTANCE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDistance(@jakarta.annotation.Nonnull BigDecimal distance) {
    this.distance = distance;
  }

  public TripSegment from(@jakarta.annotation.Nonnull Place from) {
    
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_FROM, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Place getFrom() {
    return from;
  }


  @JsonProperty(value = JSON_PROPERTY_FROM, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrom(@jakarta.annotation.Nonnull Place from) {
    this.from = from;
  }

  public TripSegment to(@jakarta.annotation.Nonnull Place to) {
    
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_TO, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Place getTo() {
    return to;
  }


  @JsonProperty(value = JSON_PROPERTY_TO, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTo(@jakarta.annotation.Nonnull Place to) {
    this.to = to;
  }

  public TripSegment departure(@jakarta.annotation.Nonnull OffsetDateTime departure) {
    
    this.departure = departure;
    return this;
  }

  /**
   * departure time
   * @return departure
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_DEPARTURE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getDeparture() {
    return departure;
  }


  @JsonProperty(value = JSON_PROPERTY_DEPARTURE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeparture(@jakarta.annotation.Nonnull OffsetDateTime departure) {
    this.departure = departure;
  }

  public TripSegment arrival(@jakarta.annotation.Nonnull OffsetDateTime arrival) {
    
    this.arrival = arrival;
    return this;
  }

  /**
   * arrival time
   * @return arrival
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_ARRIVAL, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getArrival() {
    return arrival;
  }


  @JsonProperty(value = JSON_PROPERTY_ARRIVAL, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setArrival(@jakarta.annotation.Nonnull OffsetDateTime arrival) {
    this.arrival = arrival;
  }

  public TripSegment scheduledDeparture(@jakarta.annotation.Nonnull OffsetDateTime scheduledDeparture) {
    
    this.scheduledDeparture = scheduledDeparture;
    return this;
  }

  /**
   * scheduled departure time
   * @return scheduledDeparture
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_SCHEDULED_DEPARTURE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getScheduledDeparture() {
    return scheduledDeparture;
  }


  @JsonProperty(value = JSON_PROPERTY_SCHEDULED_DEPARTURE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScheduledDeparture(@jakarta.annotation.Nonnull OffsetDateTime scheduledDeparture) {
    this.scheduledDeparture = scheduledDeparture;
  }

  public TripSegment scheduledArrival(@jakarta.annotation.Nonnull OffsetDateTime scheduledArrival) {
    
    this.scheduledArrival = scheduledArrival;
    return this;
  }

  /**
   * scheduled arrival time
   * @return scheduledArrival
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_SCHEDULED_ARRIVAL, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getScheduledArrival() {
    return scheduledArrival;
  }


  @JsonProperty(value = JSON_PROPERTY_SCHEDULED_ARRIVAL, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScheduledArrival(@jakarta.annotation.Nonnull OffsetDateTime scheduledArrival) {
    this.scheduledArrival = scheduledArrival;
  }

  public TripSegment realTime(@jakarta.annotation.Nonnull Boolean realTime) {
    
    this.realTime = realTime;
    return this;
  }

  /**
   * Whether there is real-time data about this leg
   * @return realTime
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_REAL_TIME, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getRealTime() {
    return realTime;
  }


  @JsonProperty(value = JSON_PROPERTY_REAL_TIME, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRealTime(@jakarta.annotation.Nonnull Boolean realTime) {
    this.realTime = realTime;
  }

  public TripSegment polyline(@jakarta.annotation.Nonnull String polyline) {
    
    this.polyline = polyline;
    return this;
  }

  /**
   * Google polyline encoded coordinate sequence (with precision 5) where the trip travels on this segment.
   * @return polyline
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_POLYLINE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPolyline() {
    return polyline;
  }


  @JsonProperty(value = JSON_PROPERTY_POLYLINE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPolyline(@jakarta.annotation.Nonnull String polyline) {
    this.polyline = polyline;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TripSegment tripSegment = (TripSegment) o;
    return Objects.equals(this.trips, tripSegment.trips) &&
        Objects.equals(this.routeColor, tripSegment.routeColor) &&
        Objects.equals(this.mode, tripSegment.mode) &&
        Objects.equals(this.distance, tripSegment.distance) &&
        Objects.equals(this.from, tripSegment.from) &&
        Objects.equals(this.to, tripSegment.to) &&
        Objects.equals(this.departure, tripSegment.departure) &&
        Objects.equals(this.arrival, tripSegment.arrival) &&
        Objects.equals(this.scheduledDeparture, tripSegment.scheduledDeparture) &&
        Objects.equals(this.scheduledArrival, tripSegment.scheduledArrival) &&
        Objects.equals(this.realTime, tripSegment.realTime) &&
        Objects.equals(this.polyline, tripSegment.polyline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trips, routeColor, mode, distance, from, to, departure, arrival, scheduledDeparture, scheduledArrival, realTime, polyline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TripSegment {\n");
    sb.append("    trips: ").append(toIndentedString(trips)).append("\n");
    sb.append("    routeColor: ").append(toIndentedString(routeColor)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    departure: ").append(toIndentedString(departure)).append("\n");
    sb.append("    arrival: ").append(toIndentedString(arrival)).append("\n");
    sb.append("    scheduledDeparture: ").append(toIndentedString(scheduledDeparture)).append("\n");
    sb.append("    scheduledArrival: ").append(toIndentedString(scheduledArrival)).append("\n");
    sb.append("    realTime: ").append(toIndentedString(realTime)).append("\n");
    sb.append("    polyline: ").append(toIndentedString(polyline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

