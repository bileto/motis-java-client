/*
 * MOTIS API
 * This is the MOTIS routing API.  Overview of MOTIS API versions:  MOTIS 0.x - deprecated/discontinued  MOTIS 2.x - current, providing:  * /api/v5/{plan,trip,stoptimes,map/trips} renamed METRO mode to SUBURBAN, AREAL_LIFT to AERIAL_LIFT; since MOTIS 2.5.0 * /api/v4/{plan,trip,stoptimes,map/trips} new displayName property, routeShortName only contains actual route short name from source; since MOTIS 2.2.0 * /api/v3/plan with correct maxTransfers API parameter (transfers actually corresponding to number of changes between transit legs (and not to number of transit legs), i.e. maxTransfers=0 returns direct public transit connections, as expected); since MOTIS 2.0.84  * /api/v2/{plan,trip} returns Google polylines with precision=6; since MOTIS 2.0.60 * /api/v1/{plan,trip} returns Google polylines with precision=7 (not defined for |longitude|>107) * /api/v1/_* all other endpoints  If you use the JS client lib https://www.npmjs.com/package/@motis-project/motis-client, endpoint versions will be taken into account automatically (i.e. the newest one available will be used). 
 *
 * The version of the OpenAPI document: v5
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.bileto.motis.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.bileto.motis.client.model.Area;
import dev.bileto.motis.client.model.LocationType;
import dev.bileto.motis.client.model.Mode;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GeoCoding match
 */
@JsonPropertyOrder({
  Match.JSON_PROPERTY_TYPE,
  Match.JSON_PROPERTY_CATEGORY,
  Match.JSON_PROPERTY_TOKENS,
  Match.JSON_PROPERTY_NAME,
  Match.JSON_PROPERTY_ID,
  Match.JSON_PROPERTY_LAT,
  Match.JSON_PROPERTY_LON,
  Match.JSON_PROPERTY_LEVEL,
  Match.JSON_PROPERTY_STREET,
  Match.JSON_PROPERTY_HOUSE_NUMBER,
  Match.JSON_PROPERTY_COUNTRY,
  Match.JSON_PROPERTY_ZIP,
  Match.JSON_PROPERTY_TZ,
  Match.JSON_PROPERTY_AREAS,
  Match.JSON_PROPERTY_SCORE,
  Match.JSON_PROPERTY_MODES,
  Match.JSON_PROPERTY_IMPORTANCE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class Match {
  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nonnull
  private LocationType type;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  @jakarta.annotation.Nullable
  private String category;

  public static final String JSON_PROPERTY_TOKENS = "tokens";
  @jakarta.annotation.Nonnull
  private List<List<BigDecimal>> tokens = new ArrayList<>();

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_LAT = "lat";
  @jakarta.annotation.Nonnull
  private BigDecimal lat;

  public static final String JSON_PROPERTY_LON = "lon";
  @jakarta.annotation.Nonnull
  private BigDecimal lon;

  public static final String JSON_PROPERTY_LEVEL = "level";
  @jakarta.annotation.Nullable
  private BigDecimal level;

  public static final String JSON_PROPERTY_STREET = "street";
  @jakarta.annotation.Nullable
  private String street;

  public static final String JSON_PROPERTY_HOUSE_NUMBER = "houseNumber";
  @jakarta.annotation.Nullable
  private String houseNumber;

  public static final String JSON_PROPERTY_COUNTRY = "country";
  @jakarta.annotation.Nullable
  private String country;

  public static final String JSON_PROPERTY_ZIP = "zip";
  @jakarta.annotation.Nullable
  private String zip;

  public static final String JSON_PROPERTY_TZ = "tz";
  @jakarta.annotation.Nullable
  private String tz;

  public static final String JSON_PROPERTY_AREAS = "areas";
  @jakarta.annotation.Nonnull
  private List<Area> areas = new ArrayList<>();

  public static final String JSON_PROPERTY_SCORE = "score";
  @jakarta.annotation.Nonnull
  private BigDecimal score;

  public static final String JSON_PROPERTY_MODES = "modes";
  @jakarta.annotation.Nullable
  private List<Mode> modes = new ArrayList<>();

  public static final String JSON_PROPERTY_IMPORTANCE = "importance";
  @jakarta.annotation.Nullable
  private BigDecimal importance;

  public Match() {
  }

  public Match type(@jakarta.annotation.Nonnull LocationType type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocationType getType() {
    return type;
  }


  @JsonProperty(value = JSON_PROPERTY_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@jakarta.annotation.Nonnull LocationType type) {
    this.type = type;
  }

  public Match category(@jakarta.annotation.Nullable String category) {
    
    this.category = category;
    return this;
  }

  /**
   * Experimental. Type categories might be adjusted.  For OSM stop locations: the amenity type based on https://wiki.openstreetmap.org/wiki/OpenStreetMap_Carto/Symbols 
   * @return category
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_CATEGORY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategory() {
    return category;
  }


  @JsonProperty(value = JSON_PROPERTY_CATEGORY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(@jakarta.annotation.Nullable String category) {
    this.category = category;
  }

  public Match tokens(@jakarta.annotation.Nonnull List<List<BigDecimal>> tokens) {
    
    this.tokens = tokens;
    return this;
  }

  public Match addTokensItem(List<BigDecimal> tokensItem) {
    if (this.tokens == null) {
      this.tokens = new ArrayList<>();
    }
    this.tokens.add(tokensItem);
    return this;
  }

  /**
   * list of non-overlapping tokens that were matched
   * @return tokens
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_TOKENS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<List<BigDecimal>> getTokens() {
    return tokens;
  }


  @JsonProperty(value = JSON_PROPERTY_TOKENS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokens(@jakarta.annotation.Nonnull List<List<BigDecimal>> tokens) {
    this.tokens = tokens;
  }

  public Match name(@jakarta.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * name of the location (transit stop / PoI / address)
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_NAME, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(value = JSON_PROPERTY_NAME, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }

  public Match id(@jakarta.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * unique ID of the location
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(value = JSON_PROPERTY_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull String id) {
    this.id = id;
  }

  public Match lat(@jakarta.annotation.Nonnull BigDecimal lat) {
    
    this.lat = lat;
    return this;
  }

  /**
   * latitude
   * @return lat
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_LAT, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLat() {
    return lat;
  }


  @JsonProperty(value = JSON_PROPERTY_LAT, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLat(@jakarta.annotation.Nonnull BigDecimal lat) {
    this.lat = lat;
  }

  public Match lon(@jakarta.annotation.Nonnull BigDecimal lon) {
    
    this.lon = lon;
    return this;
  }

  /**
   * longitude
   * @return lon
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_LON, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLon() {
    return lon;
  }


  @JsonProperty(value = JSON_PROPERTY_LON, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLon(@jakarta.annotation.Nonnull BigDecimal lon) {
    this.lon = lon;
  }

  public Match level(@jakarta.annotation.Nullable BigDecimal level) {
    
    this.level = level;
    return this;
  }

  /**
   * level according to OpenStreetMap (at the moment only for public transport) 
   * @return level
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_LEVEL, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getLevel() {
    return level;
  }


  @JsonProperty(value = JSON_PROPERTY_LEVEL, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLevel(@jakarta.annotation.Nullable BigDecimal level) {
    this.level = level;
  }

  public Match street(@jakarta.annotation.Nullable String street) {
    
    this.street = street;
    return this;
  }

  /**
   * street name
   * @return street
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_STREET, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStreet() {
    return street;
  }


  @JsonProperty(value = JSON_PROPERTY_STREET, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStreet(@jakarta.annotation.Nullable String street) {
    this.street = street;
  }

  public Match houseNumber(@jakarta.annotation.Nullable String houseNumber) {
    
    this.houseNumber = houseNumber;
    return this;
  }

  /**
   * house number
   * @return houseNumber
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_HOUSE_NUMBER, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHouseNumber() {
    return houseNumber;
  }


  @JsonProperty(value = JSON_PROPERTY_HOUSE_NUMBER, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHouseNumber(@jakarta.annotation.Nullable String houseNumber) {
    this.houseNumber = houseNumber;
  }

  public Match country(@jakarta.annotation.Nullable String country) {
    
    this.country = country;
    return this;
  }

  /**
   * ISO3166-1 country code from OpenStreetMap
   * @return country
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_COUNTRY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountry() {
    return country;
  }


  @JsonProperty(value = JSON_PROPERTY_COUNTRY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountry(@jakarta.annotation.Nullable String country) {
    this.country = country;
  }

  public Match zip(@jakarta.annotation.Nullable String zip) {
    
    this.zip = zip;
    return this;
  }

  /**
   * zip code
   * @return zip
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ZIP, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getZip() {
    return zip;
  }


  @JsonProperty(value = JSON_PROPERTY_ZIP, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setZip(@jakarta.annotation.Nullable String zip) {
    this.zip = zip;
  }

  public Match tz(@jakarta.annotation.Nullable String tz) {
    
    this.tz = tz;
    return this;
  }

  /**
   * timezone name (e.g. \&quot;Europe/Berlin\&quot;)
   * @return tz
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_TZ, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTz() {
    return tz;
  }


  @JsonProperty(value = JSON_PROPERTY_TZ, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTz(@jakarta.annotation.Nullable String tz) {
    this.tz = tz;
  }

  public Match areas(@jakarta.annotation.Nonnull List<Area> areas) {
    
    this.areas = areas;
    return this;
  }

  public Match addAreasItem(Area areasItem) {
    if (this.areas == null) {
      this.areas = new ArrayList<>();
    }
    this.areas.add(areasItem);
    return this;
  }

  /**
   * list of areas
   * @return areas
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_AREAS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Area> getAreas() {
    return areas;
  }


  @JsonProperty(value = JSON_PROPERTY_AREAS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAreas(@jakarta.annotation.Nonnull List<Area> areas) {
    this.areas = areas;
  }

  public Match score(@jakarta.annotation.Nonnull BigDecimal score) {
    
    this.score = score;
    return this;
  }

  /**
   * score according to the internal scoring system (the scoring algorithm might change in the future)
   * @return score
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_SCORE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getScore() {
    return score;
  }


  @JsonProperty(value = JSON_PROPERTY_SCORE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScore(@jakarta.annotation.Nonnull BigDecimal score) {
    this.score = score;
  }

  public Match modes(@jakarta.annotation.Nullable List<Mode> modes) {
    
    this.modes = modes;
    return this;
  }

  public Match addModesItem(Mode modesItem) {
    if (this.modes == null) {
      this.modes = new ArrayList<>();
    }
    this.modes.add(modesItem);
    return this;
  }

  /**
   * available transport modes for stops
   * @return modes
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_MODES, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Mode> getModes() {
    return modes;
  }


  @JsonProperty(value = JSON_PROPERTY_MODES, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModes(@jakarta.annotation.Nullable List<Mode> modes) {
    this.modes = modes;
  }

  public Match importance(@jakarta.annotation.Nullable BigDecimal importance) {
    
    this.importance = importance;
    return this;
  }

  /**
   * importance of a stop, normalized from [0, 1]
   * @return importance
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_IMPORTANCE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getImportance() {
    return importance;
  }


  @JsonProperty(value = JSON_PROPERTY_IMPORTANCE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImportance(@jakarta.annotation.Nullable BigDecimal importance) {
    this.importance = importance;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Match match = (Match) o;
    return Objects.equals(this.type, match.type) &&
        Objects.equals(this.category, match.category) &&
        Objects.equals(this.tokens, match.tokens) &&
        Objects.equals(this.name, match.name) &&
        Objects.equals(this.id, match.id) &&
        Objects.equals(this.lat, match.lat) &&
        Objects.equals(this.lon, match.lon) &&
        Objects.equals(this.level, match.level) &&
        Objects.equals(this.street, match.street) &&
        Objects.equals(this.houseNumber, match.houseNumber) &&
        Objects.equals(this.country, match.country) &&
        Objects.equals(this.zip, match.zip) &&
        Objects.equals(this.tz, match.tz) &&
        Objects.equals(this.areas, match.areas) &&
        Objects.equals(this.score, match.score) &&
        Objects.equals(this.modes, match.modes) &&
        Objects.equals(this.importance, match.importance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, category, tokens, name, id, lat, lon, level, street, houseNumber, country, zip, tz, areas, score, modes, importance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Match {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    houseNumber: ").append(toIndentedString(houseNumber)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    tz: ").append(toIndentedString(tz)).append("\n");
    sb.append("    areas: ").append(toIndentedString(areas)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    modes: ").append(toIndentedString(modes)).append("\n");
    sb.append("    importance: ").append(toIndentedString(importance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

