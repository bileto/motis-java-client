/*
 * MOTIS API
 * This is the MOTIS routing API.
 *
 * The version of the OpenAPI document: v4
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.bileto.motis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Initial200Response
 */
@JsonPropertyOrder({
  Initial200Response.JSON_PROPERTY_LAT,
  Initial200Response.JSON_PROPERTY_LON,
  Initial200Response.JSON_PROPERTY_ZOOM
})
@JsonTypeName("initial_200_response")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class Initial200Response {
  public static final String JSON_PROPERTY_LAT = "lat";
  @jakarta.annotation.Nonnull
  private BigDecimal lat;

  public static final String JSON_PROPERTY_LON = "lon";
  @jakarta.annotation.Nonnull
  private BigDecimal lon;

  public static final String JSON_PROPERTY_ZOOM = "zoom";
  @jakarta.annotation.Nonnull
  private BigDecimal zoom;

  public Initial200Response() {
  }

  public Initial200Response lat(@jakarta.annotation.Nonnull BigDecimal lat) {
    
    this.lat = lat;
    return this;
  }

  /**
   * latitude
   * @return lat
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLat() {
    return lat;
  }


  @JsonProperty(JSON_PROPERTY_LAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLat(@jakarta.annotation.Nonnull BigDecimal lat) {
    this.lat = lat;
  }

  public Initial200Response lon(@jakarta.annotation.Nonnull BigDecimal lon) {
    
    this.lon = lon;
    return this;
  }

  /**
   * longitude
   * @return lon
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLon() {
    return lon;
  }


  @JsonProperty(JSON_PROPERTY_LON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLon(@jakarta.annotation.Nonnull BigDecimal lon) {
    this.lon = lon;
  }

  public Initial200Response zoom(@jakarta.annotation.Nonnull BigDecimal zoom) {
    
    this.zoom = zoom;
    return this;
  }

  /**
   * zoom level
   * @return zoom
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ZOOM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getZoom() {
    return zoom;
  }


  @JsonProperty(JSON_PROPERTY_ZOOM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setZoom(@jakarta.annotation.Nonnull BigDecimal zoom) {
    this.zoom = zoom;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Initial200Response initial200Response = (Initial200Response) o;
    return Objects.equals(this.lat, initial200Response.lat) &&
        Objects.equals(this.lon, initial200Response.lon) &&
        Objects.equals(this.zoom, initial200Response.zoom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lat, lon, zoom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Initial200Response {\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("    zoom: ").append(toIndentedString(zoom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

