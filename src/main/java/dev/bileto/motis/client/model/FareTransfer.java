/*
 * MOTIS API
 * This is the MOTIS routing API.  Overview of MOTIS API versions:  MOTIS 0.x - deprecated/discontinued  MOTIS 2.x - current, providing:  * /api/v5/{plan,trip,stoptimes,map/trips} renamed METRO mode to SUBURBAN, AREAL_LIFT to AERIAL_LIFT; since MOTIS 2.5.0 * /api/v4/{plan,trip,stoptimes,map/trips} new displayName property, routeShortName only contains actual route short name from source; since MOTIS 2.2.0 * /api/v3/plan with correct maxTransfers API parameter (transfers actually corresponding to number of changes between transit legs (and not to number of transit legs), i.e. maxTransfers=0 returns direct public transit connections, as expected); since MOTIS 2.0.84  * /api/v2/{plan,trip} returns Google polylines with precision=6; since MOTIS 2.0.60 * /api/v1/{plan,trip} returns Google polylines with precision=7 (not defined for |longitude|>107) * /api/v1/_* all other endpoints  If you use the JS client lib https://www.npmjs.com/package/@motis-project/motis-client, endpoint versions will be taken into account automatically (i.e. the newest one available will be used). 
 *
 * The version of the OpenAPI document: v5
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dev.bileto.motis.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import dev.bileto.motis.client.model.FareProduct;
import dev.bileto.motis.client.model.FareTransferRule;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The concept is derived from: https://gtfs.org/documentation/schedule/reference/#fare_transfer_rulestxt  Terminology:   - **Leg**: An itinerary leg as described by the &#x60;Leg&#x60; type of this API description.   - **Effective Fare Leg**: Itinerary legs can be joined together to form one *effective fare leg*.   - **Fare Transfer**: A fare transfer groups two or more effective fare legs.   - **A** is the first *effective fare leg* of potentially multiple consecutive legs contained in a fare transfer   - **B** is any *effective fare leg* following the first *effective fare leg* in this transfer   - **AB** are all changes between *effective fare legs* contained in this transfer  The fare transfer rule is used to derive the final set of products of the itinerary legs contained in this transfer:   - A_AB means that any product from the first effective fare leg combined with the product attached to the transfer itself (AB) which can be empty (&#x3D; free). Note that all subsequent effective fare leg products need to be ignored in this case.   - A_AB_B mean that a product for each effective fare leg needs to be purchased in a addition to the product attached to the transfer itself (AB) which can be empty (&#x3D; free)   - AB only the transfer product itself has to be purchased. Note that all fare products attached to the contained effective fare legs need to be ignored in this case.  An itinerary &#x60;Leg&#x60; references the index of the fare transfer and the index of the effective fare leg in this transfer it belongs to. 
 */
@JsonPropertyOrder({
  FareTransfer.JSON_PROPERTY_RULE,
  FareTransfer.JSON_PROPERTY_TRANSFER_PRODUCTS,
  FareTransfer.JSON_PROPERTY_EFFECTIVE_FARE_LEG_PRODUCTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class FareTransfer {
  public static final String JSON_PROPERTY_RULE = "rule";
  @jakarta.annotation.Nullable
  private FareTransferRule rule;

  public static final String JSON_PROPERTY_TRANSFER_PRODUCTS = "transferProducts";
  @jakarta.annotation.Nullable
  private List<FareProduct> transferProducts = new ArrayList<>();

  public static final String JSON_PROPERTY_EFFECTIVE_FARE_LEG_PRODUCTS = "effectiveFareLegProducts";
  @jakarta.annotation.Nonnull
  private List<List<List<FareProduct>>> effectiveFareLegProducts = new ArrayList<>();

  public FareTransfer() {
  }

  public FareTransfer rule(@jakarta.annotation.Nullable FareTransferRule rule) {
    
    this.rule = rule;
    return this;
  }

  /**
   * Get rule
   * @return rule
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_RULE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FareTransferRule getRule() {
    return rule;
  }


  @JsonProperty(value = JSON_PROPERTY_RULE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRule(@jakarta.annotation.Nullable FareTransferRule rule) {
    this.rule = rule;
  }

  public FareTransfer transferProducts(@jakarta.annotation.Nullable List<FareProduct> transferProducts) {
    
    this.transferProducts = transferProducts;
    return this;
  }

  public FareTransfer addTransferProductsItem(FareProduct transferProductsItem) {
    if (this.transferProducts == null) {
      this.transferProducts = new ArrayList<>();
    }
    this.transferProducts.add(transferProductsItem);
    return this;
  }

  /**
   * Get transferProducts
   * @return transferProducts
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_TRANSFER_PRODUCTS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FareProduct> getTransferProducts() {
    return transferProducts;
  }


  @JsonProperty(value = JSON_PROPERTY_TRANSFER_PRODUCTS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransferProducts(@jakarta.annotation.Nullable List<FareProduct> transferProducts) {
    this.transferProducts = transferProducts;
  }

  public FareTransfer effectiveFareLegProducts(@jakarta.annotation.Nonnull List<List<List<FareProduct>>> effectiveFareLegProducts) {
    
    this.effectiveFareLegProducts = effectiveFareLegProducts;
    return this;
  }

  public FareTransfer addEffectiveFareLegProductsItem(List<List<FareProduct>> effectiveFareLegProductsItem) {
    if (this.effectiveFareLegProducts == null) {
      this.effectiveFareLegProducts = new ArrayList<>();
    }
    this.effectiveFareLegProducts.add(effectiveFareLegProductsItem);
    return this;
  }

  /**
   * Lists all valid fare products for the effective fare legs. This is an &#x60;array&lt;array&lt;FareProduct&gt;&gt;&#x60; where the inner array lists all possible fare products that would cover this effective fare leg. Each \&quot;effective fare leg\&quot; can have multiple options for adult/child/weekly/monthly/day/one-way tickets etc. You can see the outer array as AND (you need one ticket for each effective fare leg (&#x60;A_AB_B&#x60;), the first effective fare leg (&#x60;A_AB&#x60;) or no fare leg at all but only the transfer product (&#x60;AB&#x60;) and the inner array as OR (you can choose which ticket to buy) 
   * @return effectiveFareLegProducts
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_EFFECTIVE_FARE_LEG_PRODUCTS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<List<List<FareProduct>>> getEffectiveFareLegProducts() {
    return effectiveFareLegProducts;
  }


  @JsonProperty(value = JSON_PROPERTY_EFFECTIVE_FARE_LEG_PRODUCTS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEffectiveFareLegProducts(@jakarta.annotation.Nonnull List<List<List<FareProduct>>> effectiveFareLegProducts) {
    this.effectiveFareLegProducts = effectiveFareLegProducts;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FareTransfer fareTransfer = (FareTransfer) o;
    return Objects.equals(this.rule, fareTransfer.rule) &&
        Objects.equals(this.transferProducts, fareTransfer.transferProducts) &&
        Objects.equals(this.effectiveFareLegProducts, fareTransfer.effectiveFareLegProducts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rule, transferProducts, effectiveFareLegProducts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FareTransfer {\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    transferProducts: ").append(toIndentedString(transferProducts)).append("\n");
    sb.append("    effectiveFareLegProducts: ").append(toIndentedString(effectiveFareLegProducts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

