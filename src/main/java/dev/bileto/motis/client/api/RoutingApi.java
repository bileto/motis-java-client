package dev.bileto.motis.client.api;

import dev.bileto.motis.client.ApiClient;

import java.math.BigDecimal;
import dev.bileto.motis.client.model.Duration;
import dev.bileto.motis.client.model.ElevationCosts;
import dev.bileto.motis.client.model.Error;
import dev.bileto.motis.client.model.Mode;
import java.time.OffsetDateTime;
import dev.bileto.motis.client.model.PedestrianProfile;
import dev.bileto.motis.client.model.Plan200Response;
import dev.bileto.motis.client.model.Reachable;
import dev.bileto.motis.client.model.RentalFormFactor;
import dev.bileto.motis.client.model.RentalPropulsionType;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Arrays;
import java.util.stream.Collectors;

import org.springframework.core.io.FileSystemResource;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Flux;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class RoutingApi {
    private ApiClient apiClient;

    public RoutingApi() {
        this(new ApiClient());
    }

    public RoutingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Computes all reachable locations from a given stop within a set duration. Each result entry will contain the fastest travel duration and the number of connections used. 
     * 
     * <p><b>400</b> - Bad Request
     * <p><b>200</b> - The starting position and a list of all reachable stops If no paths are found, the reachable list is empty. 
     * @param one \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param maxTravelTime The maximum travel time in minutes. Defaults to 90. The limit may be increased by the server administrator using &#x60;onetoall_max_travel_minutes&#x60; option in &#x60;config.yml&#x60;. See documentation for details.
     * @param time Optional. Defaults to the current time.  Departure time ($arriveBy&#x3D;false) / arrival date ($arriveBy&#x3D;true), 
     * @param arriveBy true &#x3D; all to one, false &#x3D; one to all 
     * @param maxTransfers The maximum number of allowed transfers (i.e. interchanges between transit legs, pre- and postTransit do not count as transfers). &#x60;maxTransfers&#x3D;0&#x60; searches for direct transit connections without any transfers. If you want to search only for non-transit connections (&#x60;FOOT&#x60;, &#x60;CAR&#x60;, etc.), send an empty &#x60;transitModes&#x60; parameter instead.  If not provided, the routing uses the server-side default value which is hardcoded and very high to cover all use cases.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the fastest) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance.  In plan endpoints before v3, the behavior is off by one, i.e. &#x60;maxTransfers&#x3D;0&#x60; only returns non-transit connections. 
     * @param minTransferTime Optional. Default is 0 minutes.  Minimum transfer time for each transfer in minutes. 
     * @param additionalTransferTime Optional. Default is 0 minutes.  Additional transfer time reserved for each transfer in minutes. 
     * @param transferTimeFactor Optional. Default is 1.0  Factor to multiply minimum required transfer times with. Values smaller than 1.0 are not supported. 
     * @param maxMatchingDistance Optional. Default is 25 meters.  Maximum matching distance in meters to match geo coordinates to the street network. 
     * @param useRoutedTransfers Optional. Default is &#x60;false&#x60;.  Whether to use transfers routed on OpenStreetMap data. 
     * @param pedestrianProfile Optional. Default is &#x60;FOOT&#x60;.  Accessibility profile to use for pedestrian routing in transfers between transit connections and the first and last mile respectively. 
     * @param pedestrianSpeed Optional  Average speed for pedestrian routing. 
     * @param cyclingSpeed Optional  Average speed for bike routing. 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  The profile is used for routing on both the first and last mile.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @param transitModes Optional. Default is &#x60;TRANSIT&#x60; which allows all transit modes (no restriction). Allowed modes for the transit part. If empty, no transit connections will be computed. For example, this can be used to allow only &#x60;SUBURBAN,SUBWAY,TRAM&#x60;. 
     * @param preTransitModes Optional. Default is &#x60;WALK&#x60;. The behavior depends on whether &#x60;arriveBy&#x60; is set:   - &#x60;arriveBy&#x3D;true&#x60;: Currently not used   - &#x60;arriveBy&#x3D;false&#x60;: Only applies if the &#x60;one&#x60; place is a coordinate (not a transit stop).  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param postTransitModes Optional. Default is &#x60;WALK&#x60;. The behavior depends on whether &#x60;arriveBy&#x60; is set:   - &#x60;arriveBy&#x3D;true&#x60;: Only applies if the &#x60;one&#x60; place is a coordinate (not a transit stop).   - &#x60;arriveBy&#x3D;false&#x60;: Currently not used  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param requireBikeTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow bike carriage. 
     * @param requireCarTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow car carriage. 
     * @param maxPreTransitTime Optional. Default is 15min which is &#x60;900&#x60;.   - &#x60;arriveBy&#x3D;true&#x60;: Currently not used   - &#x60;arriveBy&#x3D;false&#x60;: Maximum time in seconds for the street leg at &#x60;one&#x60; location. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxPostTransitTime Optional. Default is 15min which is &#x60;900&#x60;.   - &#x60;arriveBy&#x3D;true&#x60;: Maximum time in seconds for the street leg at &#x60;one&#x60; location.   - &#x60;arriveBy&#x3D;false&#x60;: Currently not used Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @return Reachable
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    private ResponseSpec oneToAllRequestCreation(@jakarta.annotation.Nonnull String one, @jakarta.annotation.Nonnull Integer maxTravelTime, @jakarta.annotation.Nullable OffsetDateTime time, @jakarta.annotation.Nullable Boolean arriveBy, @jakarta.annotation.Nullable Integer maxTransfers, @jakarta.annotation.Nullable Integer minTransferTime, @jakarta.annotation.Nullable Integer additionalTransferTime, @jakarta.annotation.Nullable BigDecimal transferTimeFactor, @jakarta.annotation.Nullable BigDecimal maxMatchingDistance, @jakarta.annotation.Nullable Boolean useRoutedTransfers, @jakarta.annotation.Nullable PedestrianProfile pedestrianProfile, @jakarta.annotation.Nullable BigDecimal pedestrianSpeed, @jakarta.annotation.Nullable BigDecimal cyclingSpeed, @jakarta.annotation.Nullable ElevationCosts elevationCosts, @jakarta.annotation.Nullable List<Mode> transitModes, @jakarta.annotation.Nullable List<Mode> preTransitModes, @jakarta.annotation.Nullable List<Mode> postTransitModes, @jakarta.annotation.Nullable Boolean requireBikeTransport, @jakarta.annotation.Nullable Boolean requireCarTransport, @jakarta.annotation.Nullable Integer maxPreTransitTime, @jakarta.annotation.Nullable Integer maxPostTransitTime) throws WebClientResponseException {
        Object postBody = null;
        // verify the required parameter 'one' is set
        if (one == null) {
            throw new WebClientResponseException("Missing the required parameter 'one' when calling oneToAll", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'maxTravelTime' is set
        if (maxTravelTime == null) {
            throw new WebClientResponseException("Missing the required parameter 'maxTravelTime' when calling oneToAll", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // create path and map variables
        final Map<String, Object> pathParams = new HashMap<String, Object>();

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "one", one));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "time", time));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxTravelTime", maxTravelTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "arriveBy", arriveBy));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxTransfers", maxTransfers));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "minTransferTime", minTransferTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "additionalTransferTime", additionalTransferTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "transferTimeFactor", transferTimeFactor));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxMatchingDistance", maxMatchingDistance));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "useRoutedTransfers", useRoutedTransfers));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "pedestrianProfile", pedestrianProfile));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "pedestrianSpeed", pedestrianSpeed));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "cyclingSpeed", cyclingSpeed));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "elevationCosts", elevationCosts));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "transitModes", transitModes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "preTransitModes", preTransitModes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "postTransitModes", postTransitModes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "requireBikeTransport", requireBikeTransport));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "requireCarTransport", requireCarTransport));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxPreTransitTime", maxPreTransitTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxPostTransitTime", maxPostTransitTime));

        final String[] localVarAccepts = { 
            "application/json"
        };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        ParameterizedTypeReference<Reachable> localVarReturnType = new ParameterizedTypeReference<Reachable>() {};
        return apiClient.invokeAPI("/api/v1/one-to-all", HttpMethod.GET, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Computes all reachable locations from a given stop within a set duration. Each result entry will contain the fastest travel duration and the number of connections used. 
     * 
     * <p><b>400</b> - Bad Request
     * <p><b>200</b> - The starting position and a list of all reachable stops If no paths are found, the reachable list is empty. 
     * @param one \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param maxTravelTime The maximum travel time in minutes. Defaults to 90. The limit may be increased by the server administrator using &#x60;onetoall_max_travel_minutes&#x60; option in &#x60;config.yml&#x60;. See documentation for details.
     * @param time Optional. Defaults to the current time.  Departure time ($arriveBy&#x3D;false) / arrival date ($arriveBy&#x3D;true), 
     * @param arriveBy true &#x3D; all to one, false &#x3D; one to all 
     * @param maxTransfers The maximum number of allowed transfers (i.e. interchanges between transit legs, pre- and postTransit do not count as transfers). &#x60;maxTransfers&#x3D;0&#x60; searches for direct transit connections without any transfers. If you want to search only for non-transit connections (&#x60;FOOT&#x60;, &#x60;CAR&#x60;, etc.), send an empty &#x60;transitModes&#x60; parameter instead.  If not provided, the routing uses the server-side default value which is hardcoded and very high to cover all use cases.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the fastest) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance.  In plan endpoints before v3, the behavior is off by one, i.e. &#x60;maxTransfers&#x3D;0&#x60; only returns non-transit connections. 
     * @param minTransferTime Optional. Default is 0 minutes.  Minimum transfer time for each transfer in minutes. 
     * @param additionalTransferTime Optional. Default is 0 minutes.  Additional transfer time reserved for each transfer in minutes. 
     * @param transferTimeFactor Optional. Default is 1.0  Factor to multiply minimum required transfer times with. Values smaller than 1.0 are not supported. 
     * @param maxMatchingDistance Optional. Default is 25 meters.  Maximum matching distance in meters to match geo coordinates to the street network. 
     * @param useRoutedTransfers Optional. Default is &#x60;false&#x60;.  Whether to use transfers routed on OpenStreetMap data. 
     * @param pedestrianProfile Optional. Default is &#x60;FOOT&#x60;.  Accessibility profile to use for pedestrian routing in transfers between transit connections and the first and last mile respectively. 
     * @param pedestrianSpeed Optional  Average speed for pedestrian routing. 
     * @param cyclingSpeed Optional  Average speed for bike routing. 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  The profile is used for routing on both the first and last mile.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @param transitModes Optional. Default is &#x60;TRANSIT&#x60; which allows all transit modes (no restriction). Allowed modes for the transit part. If empty, no transit connections will be computed. For example, this can be used to allow only &#x60;SUBURBAN,SUBWAY,TRAM&#x60;. 
     * @param preTransitModes Optional. Default is &#x60;WALK&#x60;. The behavior depends on whether &#x60;arriveBy&#x60; is set:   - &#x60;arriveBy&#x3D;true&#x60;: Currently not used   - &#x60;arriveBy&#x3D;false&#x60;: Only applies if the &#x60;one&#x60; place is a coordinate (not a transit stop).  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param postTransitModes Optional. Default is &#x60;WALK&#x60;. The behavior depends on whether &#x60;arriveBy&#x60; is set:   - &#x60;arriveBy&#x3D;true&#x60;: Only applies if the &#x60;one&#x60; place is a coordinate (not a transit stop).   - &#x60;arriveBy&#x3D;false&#x60;: Currently not used  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param requireBikeTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow bike carriage. 
     * @param requireCarTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow car carriage. 
     * @param maxPreTransitTime Optional. Default is 15min which is &#x60;900&#x60;.   - &#x60;arriveBy&#x3D;true&#x60;: Currently not used   - &#x60;arriveBy&#x3D;false&#x60;: Maximum time in seconds for the street leg at &#x60;one&#x60; location. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxPostTransitTime Optional. Default is 15min which is &#x60;900&#x60;.   - &#x60;arriveBy&#x3D;true&#x60;: Maximum time in seconds for the street leg at &#x60;one&#x60; location.   - &#x60;arriveBy&#x3D;false&#x60;: Currently not used Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @return Reachable
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Reachable oneToAll(@jakarta.annotation.Nonnull String one, @jakarta.annotation.Nonnull Integer maxTravelTime, @jakarta.annotation.Nullable OffsetDateTime time, @jakarta.annotation.Nullable Boolean arriveBy, @jakarta.annotation.Nullable Integer maxTransfers, @jakarta.annotation.Nullable Integer minTransferTime, @jakarta.annotation.Nullable Integer additionalTransferTime, @jakarta.annotation.Nullable BigDecimal transferTimeFactor, @jakarta.annotation.Nullable BigDecimal maxMatchingDistance, @jakarta.annotation.Nullable Boolean useRoutedTransfers, @jakarta.annotation.Nullable PedestrianProfile pedestrianProfile, @jakarta.annotation.Nullable BigDecimal pedestrianSpeed, @jakarta.annotation.Nullable BigDecimal cyclingSpeed, @jakarta.annotation.Nullable ElevationCosts elevationCosts, @jakarta.annotation.Nullable List<Mode> transitModes, @jakarta.annotation.Nullable List<Mode> preTransitModes, @jakarta.annotation.Nullable List<Mode> postTransitModes, @jakarta.annotation.Nullable Boolean requireBikeTransport, @jakarta.annotation.Nullable Boolean requireCarTransport, @jakarta.annotation.Nullable Integer maxPreTransitTime, @jakarta.annotation.Nullable Integer maxPostTransitTime) throws WebClientResponseException {
        ParameterizedTypeReference<Reachable> localVarReturnType = new ParameterizedTypeReference<Reachable>() {};
        return oneToAllRequestCreation(one, maxTravelTime, time, arriveBy, maxTransfers, minTransferTime, additionalTransferTime, transferTimeFactor, maxMatchingDistance, useRoutedTransfers, pedestrianProfile, pedestrianSpeed, cyclingSpeed, elevationCosts, transitModes, preTransitModes, postTransitModes, requireBikeTransport, requireCarTransport, maxPreTransitTime, maxPostTransitTime).bodyToMono(localVarReturnType).block();
    }

    /**
     * Computes all reachable locations from a given stop within a set duration. Each result entry will contain the fastest travel duration and the number of connections used. 
     * 
     * <p><b>400</b> - Bad Request
     * <p><b>200</b> - The starting position and a list of all reachable stops If no paths are found, the reachable list is empty. 
     * @param one \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param maxTravelTime The maximum travel time in minutes. Defaults to 90. The limit may be increased by the server administrator using &#x60;onetoall_max_travel_minutes&#x60; option in &#x60;config.yml&#x60;. See documentation for details.
     * @param time Optional. Defaults to the current time.  Departure time ($arriveBy&#x3D;false) / arrival date ($arriveBy&#x3D;true), 
     * @param arriveBy true &#x3D; all to one, false &#x3D; one to all 
     * @param maxTransfers The maximum number of allowed transfers (i.e. interchanges between transit legs, pre- and postTransit do not count as transfers). &#x60;maxTransfers&#x3D;0&#x60; searches for direct transit connections without any transfers. If you want to search only for non-transit connections (&#x60;FOOT&#x60;, &#x60;CAR&#x60;, etc.), send an empty &#x60;transitModes&#x60; parameter instead.  If not provided, the routing uses the server-side default value which is hardcoded and very high to cover all use cases.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the fastest) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance.  In plan endpoints before v3, the behavior is off by one, i.e. &#x60;maxTransfers&#x3D;0&#x60; only returns non-transit connections. 
     * @param minTransferTime Optional. Default is 0 minutes.  Minimum transfer time for each transfer in minutes. 
     * @param additionalTransferTime Optional. Default is 0 minutes.  Additional transfer time reserved for each transfer in minutes. 
     * @param transferTimeFactor Optional. Default is 1.0  Factor to multiply minimum required transfer times with. Values smaller than 1.0 are not supported. 
     * @param maxMatchingDistance Optional. Default is 25 meters.  Maximum matching distance in meters to match geo coordinates to the street network. 
     * @param useRoutedTransfers Optional. Default is &#x60;false&#x60;.  Whether to use transfers routed on OpenStreetMap data. 
     * @param pedestrianProfile Optional. Default is &#x60;FOOT&#x60;.  Accessibility profile to use for pedestrian routing in transfers between transit connections and the first and last mile respectively. 
     * @param pedestrianSpeed Optional  Average speed for pedestrian routing. 
     * @param cyclingSpeed Optional  Average speed for bike routing. 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  The profile is used for routing on both the first and last mile.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @param transitModes Optional. Default is &#x60;TRANSIT&#x60; which allows all transit modes (no restriction). Allowed modes for the transit part. If empty, no transit connections will be computed. For example, this can be used to allow only &#x60;SUBURBAN,SUBWAY,TRAM&#x60;. 
     * @param preTransitModes Optional. Default is &#x60;WALK&#x60;. The behavior depends on whether &#x60;arriveBy&#x60; is set:   - &#x60;arriveBy&#x3D;true&#x60;: Currently not used   - &#x60;arriveBy&#x3D;false&#x60;: Only applies if the &#x60;one&#x60; place is a coordinate (not a transit stop).  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param postTransitModes Optional. Default is &#x60;WALK&#x60;. The behavior depends on whether &#x60;arriveBy&#x60; is set:   - &#x60;arriveBy&#x3D;true&#x60;: Only applies if the &#x60;one&#x60; place is a coordinate (not a transit stop).   - &#x60;arriveBy&#x3D;false&#x60;: Currently not used  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param requireBikeTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow bike carriage. 
     * @param requireCarTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow car carriage. 
     * @param maxPreTransitTime Optional. Default is 15min which is &#x60;900&#x60;.   - &#x60;arriveBy&#x3D;true&#x60;: Currently not used   - &#x60;arriveBy&#x3D;false&#x60;: Maximum time in seconds for the street leg at &#x60;one&#x60; location. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxPostTransitTime Optional. Default is 15min which is &#x60;900&#x60;.   - &#x60;arriveBy&#x3D;true&#x60;: Maximum time in seconds for the street leg at &#x60;one&#x60; location.   - &#x60;arriveBy&#x3D;false&#x60;: Currently not used Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @return ResponseEntity&lt;Reachable&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Reachable> oneToAllWithHttpInfo(@jakarta.annotation.Nonnull String one, @jakarta.annotation.Nonnull Integer maxTravelTime, @jakarta.annotation.Nullable OffsetDateTime time, @jakarta.annotation.Nullable Boolean arriveBy, @jakarta.annotation.Nullable Integer maxTransfers, @jakarta.annotation.Nullable Integer minTransferTime, @jakarta.annotation.Nullable Integer additionalTransferTime, @jakarta.annotation.Nullable BigDecimal transferTimeFactor, @jakarta.annotation.Nullable BigDecimal maxMatchingDistance, @jakarta.annotation.Nullable Boolean useRoutedTransfers, @jakarta.annotation.Nullable PedestrianProfile pedestrianProfile, @jakarta.annotation.Nullable BigDecimal pedestrianSpeed, @jakarta.annotation.Nullable BigDecimal cyclingSpeed, @jakarta.annotation.Nullable ElevationCosts elevationCosts, @jakarta.annotation.Nullable List<Mode> transitModes, @jakarta.annotation.Nullable List<Mode> preTransitModes, @jakarta.annotation.Nullable List<Mode> postTransitModes, @jakarta.annotation.Nullable Boolean requireBikeTransport, @jakarta.annotation.Nullable Boolean requireCarTransport, @jakarta.annotation.Nullable Integer maxPreTransitTime, @jakarta.annotation.Nullable Integer maxPostTransitTime) throws WebClientResponseException {
        ParameterizedTypeReference<Reachable> localVarReturnType = new ParameterizedTypeReference<Reachable>() {};
        return oneToAllRequestCreation(one, maxTravelTime, time, arriveBy, maxTransfers, minTransferTime, additionalTransferTime, transferTimeFactor, maxMatchingDistance, useRoutedTransfers, pedestrianProfile, pedestrianSpeed, cyclingSpeed, elevationCosts, transitModes, preTransitModes, postTransitModes, requireBikeTransport, requireCarTransport, maxPreTransitTime, maxPostTransitTime).toEntity(localVarReturnType).block();
    }

    /**
     * Computes all reachable locations from a given stop within a set duration. Each result entry will contain the fastest travel duration and the number of connections used. 
     * 
     * <p><b>400</b> - Bad Request
     * <p><b>200</b> - The starting position and a list of all reachable stops If no paths are found, the reachable list is empty. 
     * @param one \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param maxTravelTime The maximum travel time in minutes. Defaults to 90. The limit may be increased by the server administrator using &#x60;onetoall_max_travel_minutes&#x60; option in &#x60;config.yml&#x60;. See documentation for details.
     * @param time Optional. Defaults to the current time.  Departure time ($arriveBy&#x3D;false) / arrival date ($arriveBy&#x3D;true), 
     * @param arriveBy true &#x3D; all to one, false &#x3D; one to all 
     * @param maxTransfers The maximum number of allowed transfers (i.e. interchanges between transit legs, pre- and postTransit do not count as transfers). &#x60;maxTransfers&#x3D;0&#x60; searches for direct transit connections without any transfers. If you want to search only for non-transit connections (&#x60;FOOT&#x60;, &#x60;CAR&#x60;, etc.), send an empty &#x60;transitModes&#x60; parameter instead.  If not provided, the routing uses the server-side default value which is hardcoded and very high to cover all use cases.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the fastest) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance.  In plan endpoints before v3, the behavior is off by one, i.e. &#x60;maxTransfers&#x3D;0&#x60; only returns non-transit connections. 
     * @param minTransferTime Optional. Default is 0 minutes.  Minimum transfer time for each transfer in minutes. 
     * @param additionalTransferTime Optional. Default is 0 minutes.  Additional transfer time reserved for each transfer in minutes. 
     * @param transferTimeFactor Optional. Default is 1.0  Factor to multiply minimum required transfer times with. Values smaller than 1.0 are not supported. 
     * @param maxMatchingDistance Optional. Default is 25 meters.  Maximum matching distance in meters to match geo coordinates to the street network. 
     * @param useRoutedTransfers Optional. Default is &#x60;false&#x60;.  Whether to use transfers routed on OpenStreetMap data. 
     * @param pedestrianProfile Optional. Default is &#x60;FOOT&#x60;.  Accessibility profile to use for pedestrian routing in transfers between transit connections and the first and last mile respectively. 
     * @param pedestrianSpeed Optional  Average speed for pedestrian routing. 
     * @param cyclingSpeed Optional  Average speed for bike routing. 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  The profile is used for routing on both the first and last mile.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @param transitModes Optional. Default is &#x60;TRANSIT&#x60; which allows all transit modes (no restriction). Allowed modes for the transit part. If empty, no transit connections will be computed. For example, this can be used to allow only &#x60;SUBURBAN,SUBWAY,TRAM&#x60;. 
     * @param preTransitModes Optional. Default is &#x60;WALK&#x60;. The behavior depends on whether &#x60;arriveBy&#x60; is set:   - &#x60;arriveBy&#x3D;true&#x60;: Currently not used   - &#x60;arriveBy&#x3D;false&#x60;: Only applies if the &#x60;one&#x60; place is a coordinate (not a transit stop).  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param postTransitModes Optional. Default is &#x60;WALK&#x60;. The behavior depends on whether &#x60;arriveBy&#x60; is set:   - &#x60;arriveBy&#x3D;true&#x60;: Only applies if the &#x60;one&#x60; place is a coordinate (not a transit stop).   - &#x60;arriveBy&#x3D;false&#x60;: Currently not used  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param requireBikeTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow bike carriage. 
     * @param requireCarTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow car carriage. 
     * @param maxPreTransitTime Optional. Default is 15min which is &#x60;900&#x60;.   - &#x60;arriveBy&#x3D;true&#x60;: Currently not used   - &#x60;arriveBy&#x3D;false&#x60;: Maximum time in seconds for the street leg at &#x60;one&#x60; location. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxPostTransitTime Optional. Default is 15min which is &#x60;900&#x60;.   - &#x60;arriveBy&#x3D;true&#x60;: Maximum time in seconds for the street leg at &#x60;one&#x60; location.   - &#x60;arriveBy&#x3D;false&#x60;: Currently not used Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @return ResponseSpec
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseSpec oneToAllWithResponseSpec(@jakarta.annotation.Nonnull String one, @jakarta.annotation.Nonnull Integer maxTravelTime, @jakarta.annotation.Nullable OffsetDateTime time, @jakarta.annotation.Nullable Boolean arriveBy, @jakarta.annotation.Nullable Integer maxTransfers, @jakarta.annotation.Nullable Integer minTransferTime, @jakarta.annotation.Nullable Integer additionalTransferTime, @jakarta.annotation.Nullable BigDecimal transferTimeFactor, @jakarta.annotation.Nullable BigDecimal maxMatchingDistance, @jakarta.annotation.Nullable Boolean useRoutedTransfers, @jakarta.annotation.Nullable PedestrianProfile pedestrianProfile, @jakarta.annotation.Nullable BigDecimal pedestrianSpeed, @jakarta.annotation.Nullable BigDecimal cyclingSpeed, @jakarta.annotation.Nullable ElevationCosts elevationCosts, @jakarta.annotation.Nullable List<Mode> transitModes, @jakarta.annotation.Nullable List<Mode> preTransitModes, @jakarta.annotation.Nullable List<Mode> postTransitModes, @jakarta.annotation.Nullable Boolean requireBikeTransport, @jakarta.annotation.Nullable Boolean requireCarTransport, @jakarta.annotation.Nullable Integer maxPreTransitTime, @jakarta.annotation.Nullable Integer maxPostTransitTime) throws WebClientResponseException {
        return oneToAllRequestCreation(one, maxTravelTime, time, arriveBy, maxTransfers, minTransferTime, additionalTransferTime, transferTimeFactor, maxMatchingDistance, useRoutedTransfers, pedestrianProfile, pedestrianSpeed, cyclingSpeed, elevationCosts, transitModes, preTransitModes, postTransitModes, requireBikeTransport, requireCarTransport, maxPreTransitTime, maxPostTransitTime);
    }

    /**
     * Street routing from one to many places or many to one. The order in the response array corresponds to the order of coordinates of the \\&#x60;many\\&#x60; parameter in the query. 
     * 
     * <p><b>200</b> - A list of durations. If no path was found, the object is empty. 
     * @param one geo location as latitude;longitude
     * @param many geo locations as latitude;longitude,latitude;longitude,...
     * @param mode routing profile to use (currently supported: \\&#x60;WALK\\&#x60;, \\&#x60;BIKE\\&#x60;, \\&#x60;CAR\\&#x60;) 
     * @param max maximum travel time in seconds
     * @param maxMatchingDistance maximum matching distance in meters to match geo coordinates to the street network
     * @param arriveBy true &#x3D; many to one false &#x3D; one to many 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @return List&lt;Duration&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    private ResponseSpec oneToManyRequestCreation(@jakarta.annotation.Nonnull String one, @jakarta.annotation.Nonnull List<String> many, @jakarta.annotation.Nonnull Mode mode, @jakarta.annotation.Nonnull BigDecimal max, @jakarta.annotation.Nonnull BigDecimal maxMatchingDistance, @jakarta.annotation.Nonnull Boolean arriveBy, @jakarta.annotation.Nullable ElevationCosts elevationCosts) throws WebClientResponseException {
        Object postBody = null;
        // verify the required parameter 'one' is set
        if (one == null) {
            throw new WebClientResponseException("Missing the required parameter 'one' when calling oneToMany", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'many' is set
        if (many == null) {
            throw new WebClientResponseException("Missing the required parameter 'many' when calling oneToMany", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new WebClientResponseException("Missing the required parameter 'mode' when calling oneToMany", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'max' is set
        if (max == null) {
            throw new WebClientResponseException("Missing the required parameter 'max' when calling oneToMany", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'maxMatchingDistance' is set
        if (maxMatchingDistance == null) {
            throw new WebClientResponseException("Missing the required parameter 'maxMatchingDistance' when calling oneToMany", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'arriveBy' is set
        if (arriveBy == null) {
            throw new WebClientResponseException("Missing the required parameter 'arriveBy' when calling oneToMany", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // create path and map variables
        final Map<String, Object> pathParams = new HashMap<String, Object>();

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "one", one));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("multi".toUpperCase(Locale.ROOT)), "many", many));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "mode", mode));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "max", max));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxMatchingDistance", maxMatchingDistance));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "elevationCosts", elevationCosts));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "arriveBy", arriveBy));

        final String[] localVarAccepts = { 
            "application/json"
        };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        ParameterizedTypeReference<Duration> localVarReturnType = new ParameterizedTypeReference<Duration>() {};
        return apiClient.invokeAPI("/api/v1/one-to-many", HttpMethod.GET, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Street routing from one to many places or many to one. The order in the response array corresponds to the order of coordinates of the \\&#x60;many\\&#x60; parameter in the query. 
     * 
     * <p><b>200</b> - A list of durations. If no path was found, the object is empty. 
     * @param one geo location as latitude;longitude
     * @param many geo locations as latitude;longitude,latitude;longitude,...
     * @param mode routing profile to use (currently supported: \\&#x60;WALK\\&#x60;, \\&#x60;BIKE\\&#x60;, \\&#x60;CAR\\&#x60;) 
     * @param max maximum travel time in seconds
     * @param maxMatchingDistance maximum matching distance in meters to match geo coordinates to the street network
     * @param arriveBy true &#x3D; many to one false &#x3D; one to many 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @return List&lt;Duration&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public List<Duration> oneToMany(@jakarta.annotation.Nonnull String one, @jakarta.annotation.Nonnull List<String> many, @jakarta.annotation.Nonnull Mode mode, @jakarta.annotation.Nonnull BigDecimal max, @jakarta.annotation.Nonnull BigDecimal maxMatchingDistance, @jakarta.annotation.Nonnull Boolean arriveBy, @jakarta.annotation.Nullable ElevationCosts elevationCosts) throws WebClientResponseException {
        ParameterizedTypeReference<Duration> localVarReturnType = new ParameterizedTypeReference<Duration>() {};
        return oneToManyRequestCreation(one, many, mode, max, maxMatchingDistance, arriveBy, elevationCosts).bodyToFlux(localVarReturnType).collectList().block();
    }

    /**
     * Street routing from one to many places or many to one. The order in the response array corresponds to the order of coordinates of the \\&#x60;many\\&#x60; parameter in the query. 
     * 
     * <p><b>200</b> - A list of durations. If no path was found, the object is empty. 
     * @param one geo location as latitude;longitude
     * @param many geo locations as latitude;longitude,latitude;longitude,...
     * @param mode routing profile to use (currently supported: \\&#x60;WALK\\&#x60;, \\&#x60;BIKE\\&#x60;, \\&#x60;CAR\\&#x60;) 
     * @param max maximum travel time in seconds
     * @param maxMatchingDistance maximum matching distance in meters to match geo coordinates to the street network
     * @param arriveBy true &#x3D; many to one false &#x3D; one to many 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @return ResponseEntity&lt;List&lt;Duration&gt;&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<List<Duration>> oneToManyWithHttpInfo(@jakarta.annotation.Nonnull String one, @jakarta.annotation.Nonnull List<String> many, @jakarta.annotation.Nonnull Mode mode, @jakarta.annotation.Nonnull BigDecimal max, @jakarta.annotation.Nonnull BigDecimal maxMatchingDistance, @jakarta.annotation.Nonnull Boolean arriveBy, @jakarta.annotation.Nullable ElevationCosts elevationCosts) throws WebClientResponseException {
        ParameterizedTypeReference<Duration> localVarReturnType = new ParameterizedTypeReference<Duration>() {};
        return oneToManyRequestCreation(one, many, mode, max, maxMatchingDistance, arriveBy, elevationCosts).toEntityList(localVarReturnType).block();
    }

    /**
     * Street routing from one to many places or many to one. The order in the response array corresponds to the order of coordinates of the \\&#x60;many\\&#x60; parameter in the query. 
     * 
     * <p><b>200</b> - A list of durations. If no path was found, the object is empty. 
     * @param one geo location as latitude;longitude
     * @param many geo locations as latitude;longitude,latitude;longitude,...
     * @param mode routing profile to use (currently supported: \\&#x60;WALK\\&#x60;, \\&#x60;BIKE\\&#x60;, \\&#x60;CAR\\&#x60;) 
     * @param max maximum travel time in seconds
     * @param maxMatchingDistance maximum matching distance in meters to match geo coordinates to the street network
     * @param arriveBy true &#x3D; many to one false &#x3D; one to many 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @return ResponseSpec
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseSpec oneToManyWithResponseSpec(@jakarta.annotation.Nonnull String one, @jakarta.annotation.Nonnull List<String> many, @jakarta.annotation.Nonnull Mode mode, @jakarta.annotation.Nonnull BigDecimal max, @jakarta.annotation.Nonnull BigDecimal maxMatchingDistance, @jakarta.annotation.Nonnull Boolean arriveBy, @jakarta.annotation.Nullable ElevationCosts elevationCosts) throws WebClientResponseException {
        return oneToManyRequestCreation(one, many, mode, max, maxMatchingDistance, arriveBy, elevationCosts);
    }

    /**
     * Computes optimal connections from one place to another.
     * 
     * <p><b>400</b> - Bad Request
     * <p><b>200</b> - routing result
     * @param fromPlace \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param toPlace \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param detailedTransfers - true: Compute transfer polylines and step instructions. - false: Only return basic information (start time, end time, duration) for transfers. 
     * @param via List of via stops to visit (only stop IDs, no coordinates allowed for now). Also see the optional parameter &#x60;viaMinimumStay&#x60; to set a set a minimum stay duration for each via stop. 
     * @param viaMinimumStay Optional. If not set, the default is &#x60;0,0&#x60; - no stay required.  For each &#x60;via&#x60; stop a minimum stay duration in minutes.  The value &#x60;0&#x60; signals that it&#39;s allowed to stay in the same trip. This enables via stays without counting a transfer and can lead  to better connections with less transfers. Transfer connections can still be found with &#x60;viaMinimumStay&#x3D;0&#x60;. 
     * @param time Optional. Defaults to the current time.  Departure time ($arriveBy&#x3D;false) / arrival date ($arriveBy&#x3D;true), 
     * @param maxTransfers The maximum number of allowed transfers (i.e. interchanges between transit legs, pre- and postTransit do not count as transfers). &#x60;maxTransfers&#x3D;0&#x60; searches for direct transit connections without any transfers. If you want to search only for non-transit connections (&#x60;FOOT&#x60;, &#x60;CAR&#x60;, etc.), send an empty &#x60;transitModes&#x60; parameter instead.  If not provided, the routing uses the server-side default value which is hardcoded and very high to cover all use cases.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the fastest) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance.  In plan endpoints before v3, the behavior is off by one, i.e. &#x60;maxTransfers&#x3D;0&#x60; only returns non-transit connections. 
     * @param maxTravelTime The maximum travel time in minutes. If not provided, the routing to uses the value hardcoded in the server which is usually quite high.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the least transfers) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance. 
     * @param minTransferTime Optional. Default is 0 minutes.  Minimum transfer time for each transfer in minutes. 
     * @param additionalTransferTime Optional. Default is 0 minutes.  Additional transfer time reserved for each transfer in minutes. 
     * @param transferTimeFactor Optional. Default is 1.0  Factor to multiply minimum required transfer times with. Values smaller than 1.0 are not supported. 
     * @param maxMatchingDistance Optional. Default is 25 meters.  Maximum matching distance in meters to match geo coordinates to the street network. 
     * @param pedestrianProfile Optional. Default is &#x60;FOOT&#x60;.  Accessibility profile to use for pedestrian routing in transfers between transit connections, on the first mile, and last mile. 
     * @param pedestrianSpeed Optional  Average speed for pedestrian routing. 
     * @param cyclingSpeed Optional  Average speed for bike routing. 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  The profile is used for direct routing, on the first mile, and last mile.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @param useRoutedTransfers Optional. Default is &#x60;false&#x60;.  Whether to use transfers routed on OpenStreetMap data. 
     * @param joinInterlinedLegs Optional. Default is &#x60;true&#x60;.  Controls if a journey section with stay-seated transfers is returned: - &#x60;joinInterlinedLegs&#x3D;false&#x60;: as several legs (full information about all trip numbers, headsigns, etc.).   Legs that do not require a transfer (stay-seated transfer) are marked with &#x60;interlineWithPreviousLeg&#x3D;true&#x60;. - &#x60;joinInterlinedLegs&#x3D;true&#x60; (default behavior): as only one joined leg containing all stops 
     * @param transitModes Optional. Default is &#x60;TRANSIT&#x60; which allows all transit modes (no restriction). Allowed modes for the transit part. If empty, no transit connections will be computed. For example, this can be used to allow only &#x60;SUBURBAN,SUBWAY,TRAM&#x60;. 
     * @param directModes Optional. Default is &#x60;WALK&#x60; which will compute walking routes as direct connections.  Modes used for direction connections from start to destination without using transit. Results will be returned on the &#x60;direct&#x60; key.  Note: Direct connections will only be returned on the first call. For paging calls, they can be omitted.  Note: Transit connections that are slower than the fastest direct connection will not show up. This is being used as a cut-off during transit routing to speed up the search. To prevent this, it&#39;s possible to send two separate requests (one with only &#x60;transitModes&#x60; and one with only &#x60;directModes&#x60;).  Note: the output &#x60;direct&#x60; array will stay empty if the input param &#x60;maxDirectTime&#x60; makes any direct trip impossible.  Only non-transit modes such as &#x60;WALK&#x60;, &#x60;BIKE&#x60;, &#x60;CAR&#x60;, &#x60;BIKE_SHARING&#x60;, etc. can be used. 
     * @param preTransitModes Optional. Default is &#x60;WALK&#x60;. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directModes&#x60;).  A list of modes that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param postTransitModes Optional. Default is &#x60;WALK&#x60;. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directModes&#x60;).  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param directRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of vehicle type form factors that are allowed to be used for direct connections. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param preTransitRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalFormFactors&#x60;).  A list of vehicle type form factors that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param postTransitRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalFormFactors&#x60;).  A list of vehicle type form factors that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param directRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of vehicle type form factors that are allowed to be used for direct connections. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param preTransitRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalPropulsionTypes&#x60;).  A list of vehicle propulsion types that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param postTransitRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalPropulsionTypes&#x60;).  A list of vehicle propulsion types that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param directRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of rental providers that are allowed to be used for direct connections. If empty (the default), all providers are allowed. 
     * @param preTransitRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalProviders&#x60;).  A list of rental providers that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all providers are allowed. 
     * @param postTransitRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalProviders&#x60;).  A list of rental providers that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all providers are allowed. 
     * @param ignoreDirectRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for direct connections, allowing the rental vehicle to be parked anywhere. 
     * @param ignorePreTransitRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for the part from the &#x60;from&#x60; coordinate to the first transit stop, allowing the rental vehicle to be parked anywhere. 
     * @param ignorePostTransitRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for the part from the last transit stop to the &#x60;to&#x60; coordinate, allowing the rental vehicle to be parked anywhere. 
     * @param numItineraries The minimum number of itineraries to compute. This is only relevant if &#x60;timetableView&#x3D;true&#x60;. The default value is 5. 
     * @param maxItineraries Optional. By default all computed itineraries will be returned  The maximum number of itineraries to compute. This is only relevant if &#x60;timetableView&#x3D;true&#x60;.  Note: With the current implementation, setting this to a lower number will not result in any speedup.  Note: The number of returned itineraries might be slightly higher than &#x60;maxItineraries&#x60; as there might be several itineraries with the same departure time but different number of transfers. In order to not miss any itineraries for paging, either none or all itineraries with the same departure time have to be returned. 
     * @param pageCursor Use the cursor to go to the next \&quot;page\&quot; of itineraries. Copy the cursor from the last response and keep the original request as is. This will enable you to search for itineraries in the next or previous time-window. 
     * @param timetableView Optional. Default is &#x60;true&#x60;.  Search for the best trip options within a time window. If true two itineraries are considered optimal if one is better on arrival time (earliest wins) and the other is better on departure time (latest wins). In combination with arriveBy this parameter cover the following use cases:  &#x60;timetable&#x3D;false&#x60; &#x3D; waiting for the first transit departure/arrival is considered travel time:   - &#x60;arriveBy&#x3D;true&#x60;: event (e.g. a meeting) starts at 10:00 am,     compute the best journeys that arrive by that time (maximizes departure time)   - &#x60;arriveBy&#x3D;false&#x60;: event (e.g. a meeting) ends at 11:00 am,     compute the best journeys that depart after that time  &#x60;timetable&#x3D;true&#x60; &#x3D; optimize \&quot;later departure\&quot; + \&quot;earlier arrival\&quot; and give all options over a time window:   - &#x60;arriveBy&#x3D;true&#x60;: the time window around &#x60;date&#x60; and &#x60;time&#x60; refers to the arrival time window   - &#x60;arriveBy&#x3D;false&#x60;: the time window around &#x60;date&#x60; and &#x60;time&#x60; refers to the departure time window 
     * @param arriveBy Optional. Default is &#x60;false&#x60;.    - &#x60;arriveBy&#x3D;true&#x60;: the parameters &#x60;date&#x60; and &#x60;time&#x60; refer to the arrival time   - &#x60;arriveBy&#x3D;false&#x60;: the parameters &#x60;date&#x60; and &#x60;time&#x60; refer to the departure time 
     * @param searchWindow Optional. Default is 2 hours which is &#x60;7200&#x60;.  The length of the search-window in seconds. Default value two hours.    - &#x60;arriveBy&#x3D;true&#x60;: number of seconds between the earliest departure time and latest departure time   - &#x60;arriveBy&#x3D;false&#x60;: number of seconds between the earliest arrival time and the latest arrival time 
     * @param requireBikeTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow bike carriage. 
     * @param requireCarTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow car carriage. 
     * @param maxPreTransitTime Optional. Default is 15min which is &#x60;900&#x60;. Maximum time in seconds for the first street leg. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxPostTransitTime Optional. Default is 15min which is &#x60;900&#x60;. Maximum time in seconds for the last street leg. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxDirectTime Optional. Default is 30min which is &#x60;1800&#x60;. Maximum time in seconds for direct connections. Is limited by server config variable &#x60;street_routing_max_direct_seconds&#x60;. 
     * @param fastestDirectFactor Optional. Experimental. Default is &#x60;1.0&#x60;. Factor with which the duration of the fastest direct non-public-transit connection is multiplied. Values &gt; 1.0 allow transit connections that are slower than the fastest direct non-public-transit connection to be found. 
     * @param timeout Optional. Query timeout in seconds.
     * @param passengers Optional. Experimental. Number of passengers (e.g. for ODM or price calculation)
     * @param luggage Optional. Experimental. Number of luggage pieces; base unit: airline cabin luggage (e.g. for ODM or price calculation) 
     * @param slowDirect Optional. Experimental. Adds overtaken direct public transit connections.
     * @param fastestSlowDirectFactor Optional.  Factor with which the duration of the fastest slowDirect connection is multiplied. Values &gt; 1.0 allow connections that are slower than the fastest direct transit connection to be found. Values &lt; 1.0 will return all slowDirect connections. 
     * @param withFares Optional. Experimental. If set to true, the response will contain fare information.
     * @param withScheduledSkippedStops Optional. Include intermediate stops where passengers can not alight/board according to schedule.
     * @param language language tags as used in OpenStreetMap / GTFS (usually BCP-47 / ISO 639-1, or ISO 639-2 if there&#39;s no ISO 639-1) 
     * @param algorithm algorithm to use
     * @return Plan200Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    private ResponseSpec planRequestCreation(@jakarta.annotation.Nonnull String fromPlace, @jakarta.annotation.Nonnull String toPlace, @jakarta.annotation.Nonnull Boolean detailedTransfers, @jakarta.annotation.Nullable List<String> via, @jakarta.annotation.Nullable List<Integer> viaMinimumStay, @jakarta.annotation.Nullable OffsetDateTime time, @jakarta.annotation.Nullable Integer maxTransfers, @jakarta.annotation.Nullable Integer maxTravelTime, @jakarta.annotation.Nullable Integer minTransferTime, @jakarta.annotation.Nullable Integer additionalTransferTime, @jakarta.annotation.Nullable BigDecimal transferTimeFactor, @jakarta.annotation.Nullable BigDecimal maxMatchingDistance, @jakarta.annotation.Nullable PedestrianProfile pedestrianProfile, @jakarta.annotation.Nullable BigDecimal pedestrianSpeed, @jakarta.annotation.Nullable BigDecimal cyclingSpeed, @jakarta.annotation.Nullable ElevationCosts elevationCosts, @jakarta.annotation.Nullable Boolean useRoutedTransfers, @jakarta.annotation.Nullable Boolean joinInterlinedLegs, @jakarta.annotation.Nullable List<Mode> transitModes, @jakarta.annotation.Nullable List<Mode> directModes, @jakarta.annotation.Nullable List<Mode> preTransitModes, @jakarta.annotation.Nullable List<Mode> postTransitModes, @jakarta.annotation.Nullable List<RentalFormFactor> directRentalFormFactors, @jakarta.annotation.Nullable List<RentalFormFactor> preTransitRentalFormFactors, @jakarta.annotation.Nullable List<RentalFormFactor> postTransitRentalFormFactors, @jakarta.annotation.Nullable List<RentalPropulsionType> directRentalPropulsionTypes, @jakarta.annotation.Nullable List<RentalPropulsionType> preTransitRentalPropulsionTypes, @jakarta.annotation.Nullable List<RentalPropulsionType> postTransitRentalPropulsionTypes, @jakarta.annotation.Nullable List<String> directRentalProviders, @jakarta.annotation.Nullable List<String> preTransitRentalProviders, @jakarta.annotation.Nullable List<String> postTransitRentalProviders, @jakarta.annotation.Nullable Boolean ignoreDirectRentalReturnConstraints, @jakarta.annotation.Nullable Boolean ignorePreTransitRentalReturnConstraints, @jakarta.annotation.Nullable Boolean ignorePostTransitRentalReturnConstraints, @jakarta.annotation.Nullable Integer numItineraries, @jakarta.annotation.Nullable Integer maxItineraries, @jakarta.annotation.Nullable String pageCursor, @jakarta.annotation.Nullable Boolean timetableView, @jakarta.annotation.Nullable Boolean arriveBy, @jakarta.annotation.Nullable Integer searchWindow, @jakarta.annotation.Nullable Boolean requireBikeTransport, @jakarta.annotation.Nullable Boolean requireCarTransport, @jakarta.annotation.Nullable Integer maxPreTransitTime, @jakarta.annotation.Nullable Integer maxPostTransitTime, @jakarta.annotation.Nullable Integer maxDirectTime, @jakarta.annotation.Nullable BigDecimal fastestDirectFactor, @jakarta.annotation.Nullable Integer timeout, @jakarta.annotation.Nullable Integer passengers, @jakarta.annotation.Nullable Integer luggage, @jakarta.annotation.Nullable Boolean slowDirect, @jakarta.annotation.Nullable BigDecimal fastestSlowDirectFactor, @jakarta.annotation.Nullable Boolean withFares, @jakarta.annotation.Nullable Boolean withScheduledSkippedStops, @jakarta.annotation.Nullable String language, @jakarta.annotation.Nullable String algorithm) throws WebClientResponseException {
        Object postBody = null;
        // verify the required parameter 'fromPlace' is set
        if (fromPlace == null) {
            throw new WebClientResponseException("Missing the required parameter 'fromPlace' when calling plan", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'toPlace' is set
        if (toPlace == null) {
            throw new WebClientResponseException("Missing the required parameter 'toPlace' when calling plan", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'detailedTransfers' is set
        if (detailedTransfers == null) {
            throw new WebClientResponseException("Missing the required parameter 'detailedTransfers' when calling plan", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // create path and map variables
        final Map<String, Object> pathParams = new HashMap<String, Object>();

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "fromPlace", fromPlace));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "toPlace", toPlace));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "via", via));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "viaMinimumStay", viaMinimumStay));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "time", time));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxTransfers", maxTransfers));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxTravelTime", maxTravelTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "minTransferTime", minTransferTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "additionalTransferTime", additionalTransferTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "transferTimeFactor", transferTimeFactor));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxMatchingDistance", maxMatchingDistance));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "pedestrianProfile", pedestrianProfile));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "pedestrianSpeed", pedestrianSpeed));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "cyclingSpeed", cyclingSpeed));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "elevationCosts", elevationCosts));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "useRoutedTransfers", useRoutedTransfers));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "detailedTransfers", detailedTransfers));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "joinInterlinedLegs", joinInterlinedLegs));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "transitModes", transitModes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "directModes", directModes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "preTransitModes", preTransitModes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "postTransitModes", postTransitModes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "directRentalFormFactors", directRentalFormFactors));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "preTransitRentalFormFactors", preTransitRentalFormFactors));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "postTransitRentalFormFactors", postTransitRentalFormFactors));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "directRentalPropulsionTypes", directRentalPropulsionTypes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "preTransitRentalPropulsionTypes", preTransitRentalPropulsionTypes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("csv".toUpperCase(Locale.ROOT)), "postTransitRentalPropulsionTypes", postTransitRentalPropulsionTypes));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("multi".toUpperCase(Locale.ROOT)), "directRentalProviders", directRentalProviders));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("multi".toUpperCase(Locale.ROOT)), "preTransitRentalProviders", preTransitRentalProviders));
        queryParams.putAll(apiClient.parameterToMultiValueMap(ApiClient.CollectionFormat.valueOf("multi".toUpperCase(Locale.ROOT)), "postTransitRentalProviders", postTransitRentalProviders));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "ignoreDirectRentalReturnConstraints", ignoreDirectRentalReturnConstraints));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "ignorePreTransitRentalReturnConstraints", ignorePreTransitRentalReturnConstraints));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "ignorePostTransitRentalReturnConstraints", ignorePostTransitRentalReturnConstraints));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "numItineraries", numItineraries));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxItineraries", maxItineraries));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "pageCursor", pageCursor));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "timetableView", timetableView));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "arriveBy", arriveBy));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "searchWindow", searchWindow));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "requireBikeTransport", requireBikeTransport));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "requireCarTransport", requireCarTransport));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxPreTransitTime", maxPreTransitTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxPostTransitTime", maxPostTransitTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "maxDirectTime", maxDirectTime));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "fastestDirectFactor", fastestDirectFactor));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "timeout", timeout));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "passengers", passengers));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "luggage", luggage));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "slowDirect", slowDirect));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "fastestSlowDirectFactor", fastestSlowDirectFactor));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "withFares", withFares));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "withScheduledSkippedStops", withScheduledSkippedStops));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "language", language));
        queryParams.putAll(apiClient.parameterToMultiValueMap(null, "algorithm", algorithm));

        final String[] localVarAccepts = { 
            "application/json"
        };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        ParameterizedTypeReference<Plan200Response> localVarReturnType = new ParameterizedTypeReference<Plan200Response>() {};
        return apiClient.invokeAPI("/api/v5/plan", HttpMethod.GET, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Computes optimal connections from one place to another.
     * 
     * <p><b>400</b> - Bad Request
     * <p><b>200</b> - routing result
     * @param fromPlace \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param toPlace \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param detailedTransfers - true: Compute transfer polylines and step instructions. - false: Only return basic information (start time, end time, duration) for transfers. 
     * @param via List of via stops to visit (only stop IDs, no coordinates allowed for now). Also see the optional parameter &#x60;viaMinimumStay&#x60; to set a set a minimum stay duration for each via stop. 
     * @param viaMinimumStay Optional. If not set, the default is &#x60;0,0&#x60; - no stay required.  For each &#x60;via&#x60; stop a minimum stay duration in minutes.  The value &#x60;0&#x60; signals that it&#39;s allowed to stay in the same trip. This enables via stays without counting a transfer and can lead  to better connections with less transfers. Transfer connections can still be found with &#x60;viaMinimumStay&#x3D;0&#x60;. 
     * @param time Optional. Defaults to the current time.  Departure time ($arriveBy&#x3D;false) / arrival date ($arriveBy&#x3D;true), 
     * @param maxTransfers The maximum number of allowed transfers (i.e. interchanges between transit legs, pre- and postTransit do not count as transfers). &#x60;maxTransfers&#x3D;0&#x60; searches for direct transit connections without any transfers. If you want to search only for non-transit connections (&#x60;FOOT&#x60;, &#x60;CAR&#x60;, etc.), send an empty &#x60;transitModes&#x60; parameter instead.  If not provided, the routing uses the server-side default value which is hardcoded and very high to cover all use cases.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the fastest) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance.  In plan endpoints before v3, the behavior is off by one, i.e. &#x60;maxTransfers&#x3D;0&#x60; only returns non-transit connections. 
     * @param maxTravelTime The maximum travel time in minutes. If not provided, the routing to uses the value hardcoded in the server which is usually quite high.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the least transfers) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance. 
     * @param minTransferTime Optional. Default is 0 minutes.  Minimum transfer time for each transfer in minutes. 
     * @param additionalTransferTime Optional. Default is 0 minutes.  Additional transfer time reserved for each transfer in minutes. 
     * @param transferTimeFactor Optional. Default is 1.0  Factor to multiply minimum required transfer times with. Values smaller than 1.0 are not supported. 
     * @param maxMatchingDistance Optional. Default is 25 meters.  Maximum matching distance in meters to match geo coordinates to the street network. 
     * @param pedestrianProfile Optional. Default is &#x60;FOOT&#x60;.  Accessibility profile to use for pedestrian routing in transfers between transit connections, on the first mile, and last mile. 
     * @param pedestrianSpeed Optional  Average speed for pedestrian routing. 
     * @param cyclingSpeed Optional  Average speed for bike routing. 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  The profile is used for direct routing, on the first mile, and last mile.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @param useRoutedTransfers Optional. Default is &#x60;false&#x60;.  Whether to use transfers routed on OpenStreetMap data. 
     * @param joinInterlinedLegs Optional. Default is &#x60;true&#x60;.  Controls if a journey section with stay-seated transfers is returned: - &#x60;joinInterlinedLegs&#x3D;false&#x60;: as several legs (full information about all trip numbers, headsigns, etc.).   Legs that do not require a transfer (stay-seated transfer) are marked with &#x60;interlineWithPreviousLeg&#x3D;true&#x60;. - &#x60;joinInterlinedLegs&#x3D;true&#x60; (default behavior): as only one joined leg containing all stops 
     * @param transitModes Optional. Default is &#x60;TRANSIT&#x60; which allows all transit modes (no restriction). Allowed modes for the transit part. If empty, no transit connections will be computed. For example, this can be used to allow only &#x60;SUBURBAN,SUBWAY,TRAM&#x60;. 
     * @param directModes Optional. Default is &#x60;WALK&#x60; which will compute walking routes as direct connections.  Modes used for direction connections from start to destination without using transit. Results will be returned on the &#x60;direct&#x60; key.  Note: Direct connections will only be returned on the first call. For paging calls, they can be omitted.  Note: Transit connections that are slower than the fastest direct connection will not show up. This is being used as a cut-off during transit routing to speed up the search. To prevent this, it&#39;s possible to send two separate requests (one with only &#x60;transitModes&#x60; and one with only &#x60;directModes&#x60;).  Note: the output &#x60;direct&#x60; array will stay empty if the input param &#x60;maxDirectTime&#x60; makes any direct trip impossible.  Only non-transit modes such as &#x60;WALK&#x60;, &#x60;BIKE&#x60;, &#x60;CAR&#x60;, &#x60;BIKE_SHARING&#x60;, etc. can be used. 
     * @param preTransitModes Optional. Default is &#x60;WALK&#x60;. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directModes&#x60;).  A list of modes that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param postTransitModes Optional. Default is &#x60;WALK&#x60;. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directModes&#x60;).  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param directRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of vehicle type form factors that are allowed to be used for direct connections. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param preTransitRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalFormFactors&#x60;).  A list of vehicle type form factors that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param postTransitRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalFormFactors&#x60;).  A list of vehicle type form factors that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param directRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of vehicle type form factors that are allowed to be used for direct connections. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param preTransitRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalPropulsionTypes&#x60;).  A list of vehicle propulsion types that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param postTransitRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalPropulsionTypes&#x60;).  A list of vehicle propulsion types that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param directRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of rental providers that are allowed to be used for direct connections. If empty (the default), all providers are allowed. 
     * @param preTransitRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalProviders&#x60;).  A list of rental providers that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all providers are allowed. 
     * @param postTransitRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalProviders&#x60;).  A list of rental providers that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all providers are allowed. 
     * @param ignoreDirectRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for direct connections, allowing the rental vehicle to be parked anywhere. 
     * @param ignorePreTransitRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for the part from the &#x60;from&#x60; coordinate to the first transit stop, allowing the rental vehicle to be parked anywhere. 
     * @param ignorePostTransitRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for the part from the last transit stop to the &#x60;to&#x60; coordinate, allowing the rental vehicle to be parked anywhere. 
     * @param numItineraries The minimum number of itineraries to compute. This is only relevant if &#x60;timetableView&#x3D;true&#x60;. The default value is 5. 
     * @param maxItineraries Optional. By default all computed itineraries will be returned  The maximum number of itineraries to compute. This is only relevant if &#x60;timetableView&#x3D;true&#x60;.  Note: With the current implementation, setting this to a lower number will not result in any speedup.  Note: The number of returned itineraries might be slightly higher than &#x60;maxItineraries&#x60; as there might be several itineraries with the same departure time but different number of transfers. In order to not miss any itineraries for paging, either none or all itineraries with the same departure time have to be returned. 
     * @param pageCursor Use the cursor to go to the next \&quot;page\&quot; of itineraries. Copy the cursor from the last response and keep the original request as is. This will enable you to search for itineraries in the next or previous time-window. 
     * @param timetableView Optional. Default is &#x60;true&#x60;.  Search for the best trip options within a time window. If true two itineraries are considered optimal if one is better on arrival time (earliest wins) and the other is better on departure time (latest wins). In combination with arriveBy this parameter cover the following use cases:  &#x60;timetable&#x3D;false&#x60; &#x3D; waiting for the first transit departure/arrival is considered travel time:   - &#x60;arriveBy&#x3D;true&#x60;: event (e.g. a meeting) starts at 10:00 am,     compute the best journeys that arrive by that time (maximizes departure time)   - &#x60;arriveBy&#x3D;false&#x60;: event (e.g. a meeting) ends at 11:00 am,     compute the best journeys that depart after that time  &#x60;timetable&#x3D;true&#x60; &#x3D; optimize \&quot;later departure\&quot; + \&quot;earlier arrival\&quot; and give all options over a time window:   - &#x60;arriveBy&#x3D;true&#x60;: the time window around &#x60;date&#x60; and &#x60;time&#x60; refers to the arrival time window   - &#x60;arriveBy&#x3D;false&#x60;: the time window around &#x60;date&#x60; and &#x60;time&#x60; refers to the departure time window 
     * @param arriveBy Optional. Default is &#x60;false&#x60;.    - &#x60;arriveBy&#x3D;true&#x60;: the parameters &#x60;date&#x60; and &#x60;time&#x60; refer to the arrival time   - &#x60;arriveBy&#x3D;false&#x60;: the parameters &#x60;date&#x60; and &#x60;time&#x60; refer to the departure time 
     * @param searchWindow Optional. Default is 2 hours which is &#x60;7200&#x60;.  The length of the search-window in seconds. Default value two hours.    - &#x60;arriveBy&#x3D;true&#x60;: number of seconds between the earliest departure time and latest departure time   - &#x60;arriveBy&#x3D;false&#x60;: number of seconds between the earliest arrival time and the latest arrival time 
     * @param requireBikeTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow bike carriage. 
     * @param requireCarTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow car carriage. 
     * @param maxPreTransitTime Optional. Default is 15min which is &#x60;900&#x60;. Maximum time in seconds for the first street leg. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxPostTransitTime Optional. Default is 15min which is &#x60;900&#x60;. Maximum time in seconds for the last street leg. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxDirectTime Optional. Default is 30min which is &#x60;1800&#x60;. Maximum time in seconds for direct connections. Is limited by server config variable &#x60;street_routing_max_direct_seconds&#x60;. 
     * @param fastestDirectFactor Optional. Experimental. Default is &#x60;1.0&#x60;. Factor with which the duration of the fastest direct non-public-transit connection is multiplied. Values &gt; 1.0 allow transit connections that are slower than the fastest direct non-public-transit connection to be found. 
     * @param timeout Optional. Query timeout in seconds.
     * @param passengers Optional. Experimental. Number of passengers (e.g. for ODM or price calculation)
     * @param luggage Optional. Experimental. Number of luggage pieces; base unit: airline cabin luggage (e.g. for ODM or price calculation) 
     * @param slowDirect Optional. Experimental. Adds overtaken direct public transit connections.
     * @param fastestSlowDirectFactor Optional.  Factor with which the duration of the fastest slowDirect connection is multiplied. Values &gt; 1.0 allow connections that are slower than the fastest direct transit connection to be found. Values &lt; 1.0 will return all slowDirect connections. 
     * @param withFares Optional. Experimental. If set to true, the response will contain fare information.
     * @param withScheduledSkippedStops Optional. Include intermediate stops where passengers can not alight/board according to schedule.
     * @param language language tags as used in OpenStreetMap / GTFS (usually BCP-47 / ISO 639-1, or ISO 639-2 if there&#39;s no ISO 639-1) 
     * @param algorithm algorithm to use
     * @return Plan200Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Plan200Response plan(@jakarta.annotation.Nonnull String fromPlace, @jakarta.annotation.Nonnull String toPlace, @jakarta.annotation.Nonnull Boolean detailedTransfers, @jakarta.annotation.Nullable List<String> via, @jakarta.annotation.Nullable List<Integer> viaMinimumStay, @jakarta.annotation.Nullable OffsetDateTime time, @jakarta.annotation.Nullable Integer maxTransfers, @jakarta.annotation.Nullable Integer maxTravelTime, @jakarta.annotation.Nullable Integer minTransferTime, @jakarta.annotation.Nullable Integer additionalTransferTime, @jakarta.annotation.Nullable BigDecimal transferTimeFactor, @jakarta.annotation.Nullable BigDecimal maxMatchingDistance, @jakarta.annotation.Nullable PedestrianProfile pedestrianProfile, @jakarta.annotation.Nullable BigDecimal pedestrianSpeed, @jakarta.annotation.Nullable BigDecimal cyclingSpeed, @jakarta.annotation.Nullable ElevationCosts elevationCosts, @jakarta.annotation.Nullable Boolean useRoutedTransfers, @jakarta.annotation.Nullable Boolean joinInterlinedLegs, @jakarta.annotation.Nullable List<Mode> transitModes, @jakarta.annotation.Nullable List<Mode> directModes, @jakarta.annotation.Nullable List<Mode> preTransitModes, @jakarta.annotation.Nullable List<Mode> postTransitModes, @jakarta.annotation.Nullable List<RentalFormFactor> directRentalFormFactors, @jakarta.annotation.Nullable List<RentalFormFactor> preTransitRentalFormFactors, @jakarta.annotation.Nullable List<RentalFormFactor> postTransitRentalFormFactors, @jakarta.annotation.Nullable List<RentalPropulsionType> directRentalPropulsionTypes, @jakarta.annotation.Nullable List<RentalPropulsionType> preTransitRentalPropulsionTypes, @jakarta.annotation.Nullable List<RentalPropulsionType> postTransitRentalPropulsionTypes, @jakarta.annotation.Nullable List<String> directRentalProviders, @jakarta.annotation.Nullable List<String> preTransitRentalProviders, @jakarta.annotation.Nullable List<String> postTransitRentalProviders, @jakarta.annotation.Nullable Boolean ignoreDirectRentalReturnConstraints, @jakarta.annotation.Nullable Boolean ignorePreTransitRentalReturnConstraints, @jakarta.annotation.Nullable Boolean ignorePostTransitRentalReturnConstraints, @jakarta.annotation.Nullable Integer numItineraries, @jakarta.annotation.Nullable Integer maxItineraries, @jakarta.annotation.Nullable String pageCursor, @jakarta.annotation.Nullable Boolean timetableView, @jakarta.annotation.Nullable Boolean arriveBy, @jakarta.annotation.Nullable Integer searchWindow, @jakarta.annotation.Nullable Boolean requireBikeTransport, @jakarta.annotation.Nullable Boolean requireCarTransport, @jakarta.annotation.Nullable Integer maxPreTransitTime, @jakarta.annotation.Nullable Integer maxPostTransitTime, @jakarta.annotation.Nullable Integer maxDirectTime, @jakarta.annotation.Nullable BigDecimal fastestDirectFactor, @jakarta.annotation.Nullable Integer timeout, @jakarta.annotation.Nullable Integer passengers, @jakarta.annotation.Nullable Integer luggage, @jakarta.annotation.Nullable Boolean slowDirect, @jakarta.annotation.Nullable BigDecimal fastestSlowDirectFactor, @jakarta.annotation.Nullable Boolean withFares, @jakarta.annotation.Nullable Boolean withScheduledSkippedStops, @jakarta.annotation.Nullable String language, @jakarta.annotation.Nullable String algorithm) throws WebClientResponseException {
        ParameterizedTypeReference<Plan200Response> localVarReturnType = new ParameterizedTypeReference<Plan200Response>() {};
        return planRequestCreation(fromPlace, toPlace, detailedTransfers, via, viaMinimumStay, time, maxTransfers, maxTravelTime, minTransferTime, additionalTransferTime, transferTimeFactor, maxMatchingDistance, pedestrianProfile, pedestrianSpeed, cyclingSpeed, elevationCosts, useRoutedTransfers, joinInterlinedLegs, transitModes, directModes, preTransitModes, postTransitModes, directRentalFormFactors, preTransitRentalFormFactors, postTransitRentalFormFactors, directRentalPropulsionTypes, preTransitRentalPropulsionTypes, postTransitRentalPropulsionTypes, directRentalProviders, preTransitRentalProviders, postTransitRentalProviders, ignoreDirectRentalReturnConstraints, ignorePreTransitRentalReturnConstraints, ignorePostTransitRentalReturnConstraints, numItineraries, maxItineraries, pageCursor, timetableView, arriveBy, searchWindow, requireBikeTransport, requireCarTransport, maxPreTransitTime, maxPostTransitTime, maxDirectTime, fastestDirectFactor, timeout, passengers, luggage, slowDirect, fastestSlowDirectFactor, withFares, withScheduledSkippedStops, language, algorithm).bodyToMono(localVarReturnType).block();
    }

    /**
     * Computes optimal connections from one place to another.
     * 
     * <p><b>400</b> - Bad Request
     * <p><b>200</b> - routing result
     * @param fromPlace \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param toPlace \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param detailedTransfers - true: Compute transfer polylines and step instructions. - false: Only return basic information (start time, end time, duration) for transfers. 
     * @param via List of via stops to visit (only stop IDs, no coordinates allowed for now). Also see the optional parameter &#x60;viaMinimumStay&#x60; to set a set a minimum stay duration for each via stop. 
     * @param viaMinimumStay Optional. If not set, the default is &#x60;0,0&#x60; - no stay required.  For each &#x60;via&#x60; stop a minimum stay duration in minutes.  The value &#x60;0&#x60; signals that it&#39;s allowed to stay in the same trip. This enables via stays without counting a transfer and can lead  to better connections with less transfers. Transfer connections can still be found with &#x60;viaMinimumStay&#x3D;0&#x60;. 
     * @param time Optional. Defaults to the current time.  Departure time ($arriveBy&#x3D;false) / arrival date ($arriveBy&#x3D;true), 
     * @param maxTransfers The maximum number of allowed transfers (i.e. interchanges between transit legs, pre- and postTransit do not count as transfers). &#x60;maxTransfers&#x3D;0&#x60; searches for direct transit connections without any transfers. If you want to search only for non-transit connections (&#x60;FOOT&#x60;, &#x60;CAR&#x60;, etc.), send an empty &#x60;transitModes&#x60; parameter instead.  If not provided, the routing uses the server-side default value which is hardcoded and very high to cover all use cases.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the fastest) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance.  In plan endpoints before v3, the behavior is off by one, i.e. &#x60;maxTransfers&#x3D;0&#x60; only returns non-transit connections. 
     * @param maxTravelTime The maximum travel time in minutes. If not provided, the routing to uses the value hardcoded in the server which is usually quite high.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the least transfers) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance. 
     * @param minTransferTime Optional. Default is 0 minutes.  Minimum transfer time for each transfer in minutes. 
     * @param additionalTransferTime Optional. Default is 0 minutes.  Additional transfer time reserved for each transfer in minutes. 
     * @param transferTimeFactor Optional. Default is 1.0  Factor to multiply minimum required transfer times with. Values smaller than 1.0 are not supported. 
     * @param maxMatchingDistance Optional. Default is 25 meters.  Maximum matching distance in meters to match geo coordinates to the street network. 
     * @param pedestrianProfile Optional. Default is &#x60;FOOT&#x60;.  Accessibility profile to use for pedestrian routing in transfers between transit connections, on the first mile, and last mile. 
     * @param pedestrianSpeed Optional  Average speed for pedestrian routing. 
     * @param cyclingSpeed Optional  Average speed for bike routing. 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  The profile is used for direct routing, on the first mile, and last mile.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @param useRoutedTransfers Optional. Default is &#x60;false&#x60;.  Whether to use transfers routed on OpenStreetMap data. 
     * @param joinInterlinedLegs Optional. Default is &#x60;true&#x60;.  Controls if a journey section with stay-seated transfers is returned: - &#x60;joinInterlinedLegs&#x3D;false&#x60;: as several legs (full information about all trip numbers, headsigns, etc.).   Legs that do not require a transfer (stay-seated transfer) are marked with &#x60;interlineWithPreviousLeg&#x3D;true&#x60;. - &#x60;joinInterlinedLegs&#x3D;true&#x60; (default behavior): as only one joined leg containing all stops 
     * @param transitModes Optional. Default is &#x60;TRANSIT&#x60; which allows all transit modes (no restriction). Allowed modes for the transit part. If empty, no transit connections will be computed. For example, this can be used to allow only &#x60;SUBURBAN,SUBWAY,TRAM&#x60;. 
     * @param directModes Optional. Default is &#x60;WALK&#x60; which will compute walking routes as direct connections.  Modes used for direction connections from start to destination without using transit. Results will be returned on the &#x60;direct&#x60; key.  Note: Direct connections will only be returned on the first call. For paging calls, they can be omitted.  Note: Transit connections that are slower than the fastest direct connection will not show up. This is being used as a cut-off during transit routing to speed up the search. To prevent this, it&#39;s possible to send two separate requests (one with only &#x60;transitModes&#x60; and one with only &#x60;directModes&#x60;).  Note: the output &#x60;direct&#x60; array will stay empty if the input param &#x60;maxDirectTime&#x60; makes any direct trip impossible.  Only non-transit modes such as &#x60;WALK&#x60;, &#x60;BIKE&#x60;, &#x60;CAR&#x60;, &#x60;BIKE_SHARING&#x60;, etc. can be used. 
     * @param preTransitModes Optional. Default is &#x60;WALK&#x60;. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directModes&#x60;).  A list of modes that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param postTransitModes Optional. Default is &#x60;WALK&#x60;. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directModes&#x60;).  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param directRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of vehicle type form factors that are allowed to be used for direct connections. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param preTransitRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalFormFactors&#x60;).  A list of vehicle type form factors that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param postTransitRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalFormFactors&#x60;).  A list of vehicle type form factors that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param directRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of vehicle type form factors that are allowed to be used for direct connections. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param preTransitRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalPropulsionTypes&#x60;).  A list of vehicle propulsion types that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param postTransitRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalPropulsionTypes&#x60;).  A list of vehicle propulsion types that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param directRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of rental providers that are allowed to be used for direct connections. If empty (the default), all providers are allowed. 
     * @param preTransitRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalProviders&#x60;).  A list of rental providers that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all providers are allowed. 
     * @param postTransitRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalProviders&#x60;).  A list of rental providers that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all providers are allowed. 
     * @param ignoreDirectRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for direct connections, allowing the rental vehicle to be parked anywhere. 
     * @param ignorePreTransitRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for the part from the &#x60;from&#x60; coordinate to the first transit stop, allowing the rental vehicle to be parked anywhere. 
     * @param ignorePostTransitRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for the part from the last transit stop to the &#x60;to&#x60; coordinate, allowing the rental vehicle to be parked anywhere. 
     * @param numItineraries The minimum number of itineraries to compute. This is only relevant if &#x60;timetableView&#x3D;true&#x60;. The default value is 5. 
     * @param maxItineraries Optional. By default all computed itineraries will be returned  The maximum number of itineraries to compute. This is only relevant if &#x60;timetableView&#x3D;true&#x60;.  Note: With the current implementation, setting this to a lower number will not result in any speedup.  Note: The number of returned itineraries might be slightly higher than &#x60;maxItineraries&#x60; as there might be several itineraries with the same departure time but different number of transfers. In order to not miss any itineraries for paging, either none or all itineraries with the same departure time have to be returned. 
     * @param pageCursor Use the cursor to go to the next \&quot;page\&quot; of itineraries. Copy the cursor from the last response and keep the original request as is. This will enable you to search for itineraries in the next or previous time-window. 
     * @param timetableView Optional. Default is &#x60;true&#x60;.  Search for the best trip options within a time window. If true two itineraries are considered optimal if one is better on arrival time (earliest wins) and the other is better on departure time (latest wins). In combination with arriveBy this parameter cover the following use cases:  &#x60;timetable&#x3D;false&#x60; &#x3D; waiting for the first transit departure/arrival is considered travel time:   - &#x60;arriveBy&#x3D;true&#x60;: event (e.g. a meeting) starts at 10:00 am,     compute the best journeys that arrive by that time (maximizes departure time)   - &#x60;arriveBy&#x3D;false&#x60;: event (e.g. a meeting) ends at 11:00 am,     compute the best journeys that depart after that time  &#x60;timetable&#x3D;true&#x60; &#x3D; optimize \&quot;later departure\&quot; + \&quot;earlier arrival\&quot; and give all options over a time window:   - &#x60;arriveBy&#x3D;true&#x60;: the time window around &#x60;date&#x60; and &#x60;time&#x60; refers to the arrival time window   - &#x60;arriveBy&#x3D;false&#x60;: the time window around &#x60;date&#x60; and &#x60;time&#x60; refers to the departure time window 
     * @param arriveBy Optional. Default is &#x60;false&#x60;.    - &#x60;arriveBy&#x3D;true&#x60;: the parameters &#x60;date&#x60; and &#x60;time&#x60; refer to the arrival time   - &#x60;arriveBy&#x3D;false&#x60;: the parameters &#x60;date&#x60; and &#x60;time&#x60; refer to the departure time 
     * @param searchWindow Optional. Default is 2 hours which is &#x60;7200&#x60;.  The length of the search-window in seconds. Default value two hours.    - &#x60;arriveBy&#x3D;true&#x60;: number of seconds between the earliest departure time and latest departure time   - &#x60;arriveBy&#x3D;false&#x60;: number of seconds between the earliest arrival time and the latest arrival time 
     * @param requireBikeTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow bike carriage. 
     * @param requireCarTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow car carriage. 
     * @param maxPreTransitTime Optional. Default is 15min which is &#x60;900&#x60;. Maximum time in seconds for the first street leg. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxPostTransitTime Optional. Default is 15min which is &#x60;900&#x60;. Maximum time in seconds for the last street leg. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxDirectTime Optional. Default is 30min which is &#x60;1800&#x60;. Maximum time in seconds for direct connections. Is limited by server config variable &#x60;street_routing_max_direct_seconds&#x60;. 
     * @param fastestDirectFactor Optional. Experimental. Default is &#x60;1.0&#x60;. Factor with which the duration of the fastest direct non-public-transit connection is multiplied. Values &gt; 1.0 allow transit connections that are slower than the fastest direct non-public-transit connection to be found. 
     * @param timeout Optional. Query timeout in seconds.
     * @param passengers Optional. Experimental. Number of passengers (e.g. for ODM or price calculation)
     * @param luggage Optional. Experimental. Number of luggage pieces; base unit: airline cabin luggage (e.g. for ODM or price calculation) 
     * @param slowDirect Optional. Experimental. Adds overtaken direct public transit connections.
     * @param fastestSlowDirectFactor Optional.  Factor with which the duration of the fastest slowDirect connection is multiplied. Values &gt; 1.0 allow connections that are slower than the fastest direct transit connection to be found. Values &lt; 1.0 will return all slowDirect connections. 
     * @param withFares Optional. Experimental. If set to true, the response will contain fare information.
     * @param withScheduledSkippedStops Optional. Include intermediate stops where passengers can not alight/board according to schedule.
     * @param language language tags as used in OpenStreetMap / GTFS (usually BCP-47 / ISO 639-1, or ISO 639-2 if there&#39;s no ISO 639-1) 
     * @param algorithm algorithm to use
     * @return ResponseEntity&lt;Plan200Response&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Plan200Response> planWithHttpInfo(@jakarta.annotation.Nonnull String fromPlace, @jakarta.annotation.Nonnull String toPlace, @jakarta.annotation.Nonnull Boolean detailedTransfers, @jakarta.annotation.Nullable List<String> via, @jakarta.annotation.Nullable List<Integer> viaMinimumStay, @jakarta.annotation.Nullable OffsetDateTime time, @jakarta.annotation.Nullable Integer maxTransfers, @jakarta.annotation.Nullable Integer maxTravelTime, @jakarta.annotation.Nullable Integer minTransferTime, @jakarta.annotation.Nullable Integer additionalTransferTime, @jakarta.annotation.Nullable BigDecimal transferTimeFactor, @jakarta.annotation.Nullable BigDecimal maxMatchingDistance, @jakarta.annotation.Nullable PedestrianProfile pedestrianProfile, @jakarta.annotation.Nullable BigDecimal pedestrianSpeed, @jakarta.annotation.Nullable BigDecimal cyclingSpeed, @jakarta.annotation.Nullable ElevationCosts elevationCosts, @jakarta.annotation.Nullable Boolean useRoutedTransfers, @jakarta.annotation.Nullable Boolean joinInterlinedLegs, @jakarta.annotation.Nullable List<Mode> transitModes, @jakarta.annotation.Nullable List<Mode> directModes, @jakarta.annotation.Nullable List<Mode> preTransitModes, @jakarta.annotation.Nullable List<Mode> postTransitModes, @jakarta.annotation.Nullable List<RentalFormFactor> directRentalFormFactors, @jakarta.annotation.Nullable List<RentalFormFactor> preTransitRentalFormFactors, @jakarta.annotation.Nullable List<RentalFormFactor> postTransitRentalFormFactors, @jakarta.annotation.Nullable List<RentalPropulsionType> directRentalPropulsionTypes, @jakarta.annotation.Nullable List<RentalPropulsionType> preTransitRentalPropulsionTypes, @jakarta.annotation.Nullable List<RentalPropulsionType> postTransitRentalPropulsionTypes, @jakarta.annotation.Nullable List<String> directRentalProviders, @jakarta.annotation.Nullable List<String> preTransitRentalProviders, @jakarta.annotation.Nullable List<String> postTransitRentalProviders, @jakarta.annotation.Nullable Boolean ignoreDirectRentalReturnConstraints, @jakarta.annotation.Nullable Boolean ignorePreTransitRentalReturnConstraints, @jakarta.annotation.Nullable Boolean ignorePostTransitRentalReturnConstraints, @jakarta.annotation.Nullable Integer numItineraries, @jakarta.annotation.Nullable Integer maxItineraries, @jakarta.annotation.Nullable String pageCursor, @jakarta.annotation.Nullable Boolean timetableView, @jakarta.annotation.Nullable Boolean arriveBy, @jakarta.annotation.Nullable Integer searchWindow, @jakarta.annotation.Nullable Boolean requireBikeTransport, @jakarta.annotation.Nullable Boolean requireCarTransport, @jakarta.annotation.Nullable Integer maxPreTransitTime, @jakarta.annotation.Nullable Integer maxPostTransitTime, @jakarta.annotation.Nullable Integer maxDirectTime, @jakarta.annotation.Nullable BigDecimal fastestDirectFactor, @jakarta.annotation.Nullable Integer timeout, @jakarta.annotation.Nullable Integer passengers, @jakarta.annotation.Nullable Integer luggage, @jakarta.annotation.Nullable Boolean slowDirect, @jakarta.annotation.Nullable BigDecimal fastestSlowDirectFactor, @jakarta.annotation.Nullable Boolean withFares, @jakarta.annotation.Nullable Boolean withScheduledSkippedStops, @jakarta.annotation.Nullable String language, @jakarta.annotation.Nullable String algorithm) throws WebClientResponseException {
        ParameterizedTypeReference<Plan200Response> localVarReturnType = new ParameterizedTypeReference<Plan200Response>() {};
        return planRequestCreation(fromPlace, toPlace, detailedTransfers, via, viaMinimumStay, time, maxTransfers, maxTravelTime, minTransferTime, additionalTransferTime, transferTimeFactor, maxMatchingDistance, pedestrianProfile, pedestrianSpeed, cyclingSpeed, elevationCosts, useRoutedTransfers, joinInterlinedLegs, transitModes, directModes, preTransitModes, postTransitModes, directRentalFormFactors, preTransitRentalFormFactors, postTransitRentalFormFactors, directRentalPropulsionTypes, preTransitRentalPropulsionTypes, postTransitRentalPropulsionTypes, directRentalProviders, preTransitRentalProviders, postTransitRentalProviders, ignoreDirectRentalReturnConstraints, ignorePreTransitRentalReturnConstraints, ignorePostTransitRentalReturnConstraints, numItineraries, maxItineraries, pageCursor, timetableView, arriveBy, searchWindow, requireBikeTransport, requireCarTransport, maxPreTransitTime, maxPostTransitTime, maxDirectTime, fastestDirectFactor, timeout, passengers, luggage, slowDirect, fastestSlowDirectFactor, withFares, withScheduledSkippedStops, language, algorithm).toEntity(localVarReturnType).block();
    }

    /**
     * Computes optimal connections from one place to another.
     * 
     * <p><b>400</b> - Bad Request
     * <p><b>200</b> - routing result
     * @param fromPlace \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param toPlace \\&#x60;latitude,longitude[,level]\\&#x60; tuple with - latitude and longitude in degrees - (optional) level: the OSM level (default: 0)  OR  stop id 
     * @param detailedTransfers - true: Compute transfer polylines and step instructions. - false: Only return basic information (start time, end time, duration) for transfers. 
     * @param via List of via stops to visit (only stop IDs, no coordinates allowed for now). Also see the optional parameter &#x60;viaMinimumStay&#x60; to set a set a minimum stay duration for each via stop. 
     * @param viaMinimumStay Optional. If not set, the default is &#x60;0,0&#x60; - no stay required.  For each &#x60;via&#x60; stop a minimum stay duration in minutes.  The value &#x60;0&#x60; signals that it&#39;s allowed to stay in the same trip. This enables via stays without counting a transfer and can lead  to better connections with less transfers. Transfer connections can still be found with &#x60;viaMinimumStay&#x3D;0&#x60;. 
     * @param time Optional. Defaults to the current time.  Departure time ($arriveBy&#x3D;false) / arrival date ($arriveBy&#x3D;true), 
     * @param maxTransfers The maximum number of allowed transfers (i.e. interchanges between transit legs, pre- and postTransit do not count as transfers). &#x60;maxTransfers&#x3D;0&#x60; searches for direct transit connections without any transfers. If you want to search only for non-transit connections (&#x60;FOOT&#x60;, &#x60;CAR&#x60;, etc.), send an empty &#x60;transitModes&#x60; parameter instead.  If not provided, the routing uses the server-side default value which is hardcoded and very high to cover all use cases.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the fastest) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance.  In plan endpoints before v3, the behavior is off by one, i.e. &#x60;maxTransfers&#x3D;0&#x60; only returns non-transit connections. 
     * @param maxTravelTime The maximum travel time in minutes. If not provided, the routing to uses the value hardcoded in the server which is usually quite high.  *Warning*: Use with care. Setting this too low can lead to optimal (e.g. the least transfers) journeys not being found. If this value is too low to reach the destination at all, it can lead to slow routing performance. 
     * @param minTransferTime Optional. Default is 0 minutes.  Minimum transfer time for each transfer in minutes. 
     * @param additionalTransferTime Optional. Default is 0 minutes.  Additional transfer time reserved for each transfer in minutes. 
     * @param transferTimeFactor Optional. Default is 1.0  Factor to multiply minimum required transfer times with. Values smaller than 1.0 are not supported. 
     * @param maxMatchingDistance Optional. Default is 25 meters.  Maximum matching distance in meters to match geo coordinates to the street network. 
     * @param pedestrianProfile Optional. Default is &#x60;FOOT&#x60;.  Accessibility profile to use for pedestrian routing in transfers between transit connections, on the first mile, and last mile. 
     * @param pedestrianSpeed Optional  Average speed for pedestrian routing. 
     * @param cyclingSpeed Optional  Average speed for bike routing. 
     * @param elevationCosts Optional. Default is &#x60;NONE&#x60;.  Set an elevation cost profile, to penalize routes with incline. - &#x60;NONE&#x60;: No additional costs for elevations. This is the default behavior - &#x60;LOW&#x60;: Add a low cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if small detours are required. - &#x60;HIGH&#x60;: Add a high cost for increase in elevation and incline along the way. This will prefer routes with less ascent, if larger detours are required.  As using an elevation costs profile will increase the travel duration, routing through steep terrain may exceed the maximal allowed duration, causing a location to appear unreachable. Increasing the maximum travel time for these segments may resolve this issue.  The profile is used for direct routing, on the first mile, and last mile.  Elevation cost profiles are currently used by following street modes: - &#x60;BIKE&#x60; 
     * @param useRoutedTransfers Optional. Default is &#x60;false&#x60;.  Whether to use transfers routed on OpenStreetMap data. 
     * @param joinInterlinedLegs Optional. Default is &#x60;true&#x60;.  Controls if a journey section with stay-seated transfers is returned: - &#x60;joinInterlinedLegs&#x3D;false&#x60;: as several legs (full information about all trip numbers, headsigns, etc.).   Legs that do not require a transfer (stay-seated transfer) are marked with &#x60;interlineWithPreviousLeg&#x3D;true&#x60;. - &#x60;joinInterlinedLegs&#x3D;true&#x60; (default behavior): as only one joined leg containing all stops 
     * @param transitModes Optional. Default is &#x60;TRANSIT&#x60; which allows all transit modes (no restriction). Allowed modes for the transit part. If empty, no transit connections will be computed. For example, this can be used to allow only &#x60;SUBURBAN,SUBWAY,TRAM&#x60;. 
     * @param directModes Optional. Default is &#x60;WALK&#x60; which will compute walking routes as direct connections.  Modes used for direction connections from start to destination without using transit. Results will be returned on the &#x60;direct&#x60; key.  Note: Direct connections will only be returned on the first call. For paging calls, they can be omitted.  Note: Transit connections that are slower than the fastest direct connection will not show up. This is being used as a cut-off during transit routing to speed up the search. To prevent this, it&#39;s possible to send two separate requests (one with only &#x60;transitModes&#x60; and one with only &#x60;directModes&#x60;).  Note: the output &#x60;direct&#x60; array will stay empty if the input param &#x60;maxDirectTime&#x60; makes any direct trip impossible.  Only non-transit modes such as &#x60;WALK&#x60;, &#x60;BIKE&#x60;, &#x60;CAR&#x60;, &#x60;BIKE_SHARING&#x60;, etc. can be used. 
     * @param preTransitModes Optional. Default is &#x60;WALK&#x60;. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directModes&#x60;).  A list of modes that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param postTransitModes Optional. Default is &#x60;WALK&#x60;. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directModes&#x60;).  A list of modes that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. Example: &#x60;WALK,BIKE_SHARING&#x60;. 
     * @param directRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of vehicle type form factors that are allowed to be used for direct connections. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param preTransitRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalFormFactors&#x60;).  A list of vehicle type form factors that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param postTransitRentalFormFactors Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalFormFactors&#x60;).  A list of vehicle type form factors that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all form factors are allowed. Example: &#x60;BICYCLE,SCOOTER_STANDING&#x60;. 
     * @param directRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of vehicle type form factors that are allowed to be used for direct connections. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param preTransitRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalPropulsionTypes&#x60;).  A list of vehicle propulsion types that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param postTransitRentalPropulsionTypes Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalPropulsionTypes&#x60;).  A list of vehicle propulsion types that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all propulsion types are allowed. Example: &#x60;HUMAN,ELECTRIC,ELECTRIC_ASSIST&#x60;. 
     * @param directRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies to direct connections.  A list of rental providers that are allowed to be used for direct connections. If empty (the default), all providers are allowed. 
     * @param preTransitRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;from&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalProviders&#x60;).  A list of rental providers that are allowed to be used from the &#x60;from&#x60; coordinate to the first transit stop. If empty (the default), all providers are allowed. 
     * @param postTransitRentalProviders Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Only applies if the &#x60;to&#x60; place is a coordinate (not a transit stop). Does not apply to direct connections (see &#x60;directRentalProviders&#x60;).  A list of rental providers that are allowed to be used from the last transit stop to the &#x60;to&#x60; coordinate. If empty (the default), all providers are allowed. 
     * @param ignoreDirectRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for direct connections, allowing the rental vehicle to be parked anywhere. 
     * @param ignorePreTransitRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for the part from the &#x60;from&#x60; coordinate to the first transit stop, allowing the rental vehicle to be parked anywhere. 
     * @param ignorePostTransitRentalReturnConstraints Experimental. Expect unannounced breaking changes (without version bumps).  Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, the routing will ignore rental return constraints for the part from the last transit stop to the &#x60;to&#x60; coordinate, allowing the rental vehicle to be parked anywhere. 
     * @param numItineraries The minimum number of itineraries to compute. This is only relevant if &#x60;timetableView&#x3D;true&#x60;. The default value is 5. 
     * @param maxItineraries Optional. By default all computed itineraries will be returned  The maximum number of itineraries to compute. This is only relevant if &#x60;timetableView&#x3D;true&#x60;.  Note: With the current implementation, setting this to a lower number will not result in any speedup.  Note: The number of returned itineraries might be slightly higher than &#x60;maxItineraries&#x60; as there might be several itineraries with the same departure time but different number of transfers. In order to not miss any itineraries for paging, either none or all itineraries with the same departure time have to be returned. 
     * @param pageCursor Use the cursor to go to the next \&quot;page\&quot; of itineraries. Copy the cursor from the last response and keep the original request as is. This will enable you to search for itineraries in the next or previous time-window. 
     * @param timetableView Optional. Default is &#x60;true&#x60;.  Search for the best trip options within a time window. If true two itineraries are considered optimal if one is better on arrival time (earliest wins) and the other is better on departure time (latest wins). In combination with arriveBy this parameter cover the following use cases:  &#x60;timetable&#x3D;false&#x60; &#x3D; waiting for the first transit departure/arrival is considered travel time:   - &#x60;arriveBy&#x3D;true&#x60;: event (e.g. a meeting) starts at 10:00 am,     compute the best journeys that arrive by that time (maximizes departure time)   - &#x60;arriveBy&#x3D;false&#x60;: event (e.g. a meeting) ends at 11:00 am,     compute the best journeys that depart after that time  &#x60;timetable&#x3D;true&#x60; &#x3D; optimize \&quot;later departure\&quot; + \&quot;earlier arrival\&quot; and give all options over a time window:   - &#x60;arriveBy&#x3D;true&#x60;: the time window around &#x60;date&#x60; and &#x60;time&#x60; refers to the arrival time window   - &#x60;arriveBy&#x3D;false&#x60;: the time window around &#x60;date&#x60; and &#x60;time&#x60; refers to the departure time window 
     * @param arriveBy Optional. Default is &#x60;false&#x60;.    - &#x60;arriveBy&#x3D;true&#x60;: the parameters &#x60;date&#x60; and &#x60;time&#x60; refer to the arrival time   - &#x60;arriveBy&#x3D;false&#x60;: the parameters &#x60;date&#x60; and &#x60;time&#x60; refer to the departure time 
     * @param searchWindow Optional. Default is 2 hours which is &#x60;7200&#x60;.  The length of the search-window in seconds. Default value two hours.    - &#x60;arriveBy&#x3D;true&#x60;: number of seconds between the earliest departure time and latest departure time   - &#x60;arriveBy&#x3D;false&#x60;: number of seconds between the earliest arrival time and the latest arrival time 
     * @param requireBikeTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow bike carriage. 
     * @param requireCarTransport Optional. Default is &#x60;false&#x60;.  If set to &#x60;true&#x60;, all used transit trips are required to allow car carriage. 
     * @param maxPreTransitTime Optional. Default is 15min which is &#x60;900&#x60;. Maximum time in seconds for the first street leg. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxPostTransitTime Optional. Default is 15min which is &#x60;900&#x60;. Maximum time in seconds for the last street leg. Is limited by server config variable &#x60;street_routing_max_prepost_transit_seconds&#x60;. 
     * @param maxDirectTime Optional. Default is 30min which is &#x60;1800&#x60;. Maximum time in seconds for direct connections. Is limited by server config variable &#x60;street_routing_max_direct_seconds&#x60;. 
     * @param fastestDirectFactor Optional. Experimental. Default is &#x60;1.0&#x60;. Factor with which the duration of the fastest direct non-public-transit connection is multiplied. Values &gt; 1.0 allow transit connections that are slower than the fastest direct non-public-transit connection to be found. 
     * @param timeout Optional. Query timeout in seconds.
     * @param passengers Optional. Experimental. Number of passengers (e.g. for ODM or price calculation)
     * @param luggage Optional. Experimental. Number of luggage pieces; base unit: airline cabin luggage (e.g. for ODM or price calculation) 
     * @param slowDirect Optional. Experimental. Adds overtaken direct public transit connections.
     * @param fastestSlowDirectFactor Optional.  Factor with which the duration of the fastest slowDirect connection is multiplied. Values &gt; 1.0 allow connections that are slower than the fastest direct transit connection to be found. Values &lt; 1.0 will return all slowDirect connections. 
     * @param withFares Optional. Experimental. If set to true, the response will contain fare information.
     * @param withScheduledSkippedStops Optional. Include intermediate stops where passengers can not alight/board according to schedule.
     * @param language language tags as used in OpenStreetMap / GTFS (usually BCP-47 / ISO 639-1, or ISO 639-2 if there&#39;s no ISO 639-1) 
     * @param algorithm algorithm to use
     * @return ResponseSpec
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseSpec planWithResponseSpec(@jakarta.annotation.Nonnull String fromPlace, @jakarta.annotation.Nonnull String toPlace, @jakarta.annotation.Nonnull Boolean detailedTransfers, @jakarta.annotation.Nullable List<String> via, @jakarta.annotation.Nullable List<Integer> viaMinimumStay, @jakarta.annotation.Nullable OffsetDateTime time, @jakarta.annotation.Nullable Integer maxTransfers, @jakarta.annotation.Nullable Integer maxTravelTime, @jakarta.annotation.Nullable Integer minTransferTime, @jakarta.annotation.Nullable Integer additionalTransferTime, @jakarta.annotation.Nullable BigDecimal transferTimeFactor, @jakarta.annotation.Nullable BigDecimal maxMatchingDistance, @jakarta.annotation.Nullable PedestrianProfile pedestrianProfile, @jakarta.annotation.Nullable BigDecimal pedestrianSpeed, @jakarta.annotation.Nullable BigDecimal cyclingSpeed, @jakarta.annotation.Nullable ElevationCosts elevationCosts, @jakarta.annotation.Nullable Boolean useRoutedTransfers, @jakarta.annotation.Nullable Boolean joinInterlinedLegs, @jakarta.annotation.Nullable List<Mode> transitModes, @jakarta.annotation.Nullable List<Mode> directModes, @jakarta.annotation.Nullable List<Mode> preTransitModes, @jakarta.annotation.Nullable List<Mode> postTransitModes, @jakarta.annotation.Nullable List<RentalFormFactor> directRentalFormFactors, @jakarta.annotation.Nullable List<RentalFormFactor> preTransitRentalFormFactors, @jakarta.annotation.Nullable List<RentalFormFactor> postTransitRentalFormFactors, @jakarta.annotation.Nullable List<RentalPropulsionType> directRentalPropulsionTypes, @jakarta.annotation.Nullable List<RentalPropulsionType> preTransitRentalPropulsionTypes, @jakarta.annotation.Nullable List<RentalPropulsionType> postTransitRentalPropulsionTypes, @jakarta.annotation.Nullable List<String> directRentalProviders, @jakarta.annotation.Nullable List<String> preTransitRentalProviders, @jakarta.annotation.Nullable List<String> postTransitRentalProviders, @jakarta.annotation.Nullable Boolean ignoreDirectRentalReturnConstraints, @jakarta.annotation.Nullable Boolean ignorePreTransitRentalReturnConstraints, @jakarta.annotation.Nullable Boolean ignorePostTransitRentalReturnConstraints, @jakarta.annotation.Nullable Integer numItineraries, @jakarta.annotation.Nullable Integer maxItineraries, @jakarta.annotation.Nullable String pageCursor, @jakarta.annotation.Nullable Boolean timetableView, @jakarta.annotation.Nullable Boolean arriveBy, @jakarta.annotation.Nullable Integer searchWindow, @jakarta.annotation.Nullable Boolean requireBikeTransport, @jakarta.annotation.Nullable Boolean requireCarTransport, @jakarta.annotation.Nullable Integer maxPreTransitTime, @jakarta.annotation.Nullable Integer maxPostTransitTime, @jakarta.annotation.Nullable Integer maxDirectTime, @jakarta.annotation.Nullable BigDecimal fastestDirectFactor, @jakarta.annotation.Nullable Integer timeout, @jakarta.annotation.Nullable Integer passengers, @jakarta.annotation.Nullable Integer luggage, @jakarta.annotation.Nullable Boolean slowDirect, @jakarta.annotation.Nullable BigDecimal fastestSlowDirectFactor, @jakarta.annotation.Nullable Boolean withFares, @jakarta.annotation.Nullable Boolean withScheduledSkippedStops, @jakarta.annotation.Nullable String language, @jakarta.annotation.Nullable String algorithm) throws WebClientResponseException {
        return planRequestCreation(fromPlace, toPlace, detailedTransfers, via, viaMinimumStay, time, maxTransfers, maxTravelTime, minTransferTime, additionalTransferTime, transferTimeFactor, maxMatchingDistance, pedestrianProfile, pedestrianSpeed, cyclingSpeed, elevationCosts, useRoutedTransfers, joinInterlinedLegs, transitModes, directModes, preTransitModes, postTransitModes, directRentalFormFactors, preTransitRentalFormFactors, postTransitRentalFormFactors, directRentalPropulsionTypes, preTransitRentalPropulsionTypes, postTransitRentalPropulsionTypes, directRentalProviders, preTransitRentalProviders, postTransitRentalProviders, ignoreDirectRentalReturnConstraints, ignorePreTransitRentalReturnConstraints, ignorePostTransitRentalReturnConstraints, numItineraries, maxItineraries, pageCursor, timetableView, arriveBy, searchWindow, requireBikeTransport, requireCarTransport, maxPreTransitTime, maxPostTransitTime, maxDirectTime, fastestDirectFactor, timeout, passengers, luggage, slowDirect, fastestSlowDirectFactor, withFares, withScheduledSkippedStops, language, algorithm);
    }
}
