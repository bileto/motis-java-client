/*
 * MOTIS API
 * This is the MOTIS routing API.
 *
 * The version of the OpenAPI document: v4
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bileto.motis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.bileto.motis.client.model.Itinerary;
import com.bileto.motis.client.model.Place;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Plan200Response
 */
@JsonPropertyOrder({
  Plan200Response.JSON_PROPERTY_REQUEST_PARAMETERS,
  Plan200Response.JSON_PROPERTY_DEBUG_OUTPUT,
  Plan200Response.JSON_PROPERTY_FROM,
  Plan200Response.JSON_PROPERTY_TO,
  Plan200Response.JSON_PROPERTY_DIRECT,
  Plan200Response.JSON_PROPERTY_ITINERARIES,
  Plan200Response.JSON_PROPERTY_PREVIOUS_PAGE_CURSOR,
  Plan200Response.JSON_PROPERTY_NEXT_PAGE_CURSOR
})
@JsonTypeName("plan_200_response")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class Plan200Response {
  public static final String JSON_PROPERTY_REQUEST_PARAMETERS = "requestParameters";
  @jakarta.annotation.Nonnull
  private Map<String, String> requestParameters = new HashMap<>();

  public static final String JSON_PROPERTY_DEBUG_OUTPUT = "debugOutput";
  @jakarta.annotation.Nonnull
  private Map<String, Integer> debugOutput = new HashMap<>();

  public static final String JSON_PROPERTY_FROM = "from";
  @jakarta.annotation.Nonnull
  private Place from;

  public static final String JSON_PROPERTY_TO = "to";
  @jakarta.annotation.Nonnull
  private Place to;

  public static final String JSON_PROPERTY_DIRECT = "direct";
  @jakarta.annotation.Nonnull
  private List<Itinerary> direct = new ArrayList<>();

  public static final String JSON_PROPERTY_ITINERARIES = "itineraries";
  @jakarta.annotation.Nonnull
  private List<Itinerary> itineraries = new ArrayList<>();

  public static final String JSON_PROPERTY_PREVIOUS_PAGE_CURSOR = "previousPageCursor";
  @jakarta.annotation.Nonnull
  private String previousPageCursor;

  public static final String JSON_PROPERTY_NEXT_PAGE_CURSOR = "nextPageCursor";
  @jakarta.annotation.Nonnull
  private String nextPageCursor;

  public Plan200Response() {
  }

  public Plan200Response requestParameters(@jakarta.annotation.Nonnull Map<String, String> requestParameters) {
    
    this.requestParameters = requestParameters;
    return this;
  }

  public Plan200Response putRequestParametersItem(String key, String requestParametersItem) {
    this.requestParameters.put(key, requestParametersItem);
    return this;
  }

  /**
   * the routing query
   * @return requestParameters
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUEST_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, String> getRequestParameters() {
    return requestParameters;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequestParameters(@jakarta.annotation.Nonnull Map<String, String> requestParameters) {
    this.requestParameters = requestParameters;
  }

  public Plan200Response debugOutput(@jakarta.annotation.Nonnull Map<String, Integer> debugOutput) {
    
    this.debugOutput = debugOutput;
    return this;
  }

  public Plan200Response putDebugOutputItem(String key, Integer debugOutputItem) {
    this.debugOutput.put(key, debugOutputItem);
    return this;
  }

  /**
   * debug statistics
   * @return debugOutput
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEBUG_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, Integer> getDebugOutput() {
    return debugOutput;
  }


  @JsonProperty(JSON_PROPERTY_DEBUG_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDebugOutput(@jakarta.annotation.Nonnull Map<String, Integer> debugOutput) {
    this.debugOutput = debugOutput;
  }

  public Plan200Response from(@jakarta.annotation.Nonnull Place from) {
    
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Place getFrom() {
    return from;
  }


  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrom(@jakarta.annotation.Nonnull Place from) {
    this.from = from;
  }

  public Plan200Response to(@jakarta.annotation.Nonnull Place to) {
    
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Place getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTo(@jakarta.annotation.Nonnull Place to) {
    this.to = to;
  }

  public Plan200Response direct(@jakarta.annotation.Nonnull List<Itinerary> direct) {
    
    this.direct = direct;
    return this;
  }

  public Plan200Response addDirectItem(Itinerary directItem) {
    if (this.direct == null) {
      this.direct = new ArrayList<>();
    }
    this.direct.add(directItem);
    return this;
  }

  /**
   * Direct trips by &#x60;WALK&#x60;, &#x60;BIKE&#x60;, &#x60;CAR&#x60;, etc. without time-dependency. The starting time (&#x60;arriveBy&#x3D;false&#x60;) / arrival time (&#x60;arriveBy&#x3D;true&#x60;) is always the queried &#x60;time&#x60; parameter (set to \\\&quot;now\\\&quot; if not set). But all &#x60;direct&#x60; connections are meant to be independent of absolute times. 
   * @return direct
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DIRECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Itinerary> getDirect() {
    return direct;
  }


  @JsonProperty(JSON_PROPERTY_DIRECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDirect(@jakarta.annotation.Nonnull List<Itinerary> direct) {
    this.direct = direct;
  }

  public Plan200Response itineraries(@jakarta.annotation.Nonnull List<Itinerary> itineraries) {
    
    this.itineraries = itineraries;
    return this;
  }

  public Plan200Response addItinerariesItem(Itinerary itinerariesItem) {
    if (this.itineraries == null) {
      this.itineraries = new ArrayList<>();
    }
    this.itineraries.add(itinerariesItem);
    return this;
  }

  /**
   * list of itineraries
   * @return itineraries
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITINERARIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Itinerary> getItineraries() {
    return itineraries;
  }


  @JsonProperty(JSON_PROPERTY_ITINERARIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItineraries(@jakarta.annotation.Nonnull List<Itinerary> itineraries) {
    this.itineraries = itineraries;
  }

  public Plan200Response previousPageCursor(@jakarta.annotation.Nonnull String previousPageCursor) {
    
    this.previousPageCursor = previousPageCursor;
    return this;
  }

  /**
   * Use the cursor to get the previous page of results. Insert the cursor into the request and post it to get the previous page. The previous page is a set of itineraries departing BEFORE the first itinerary in the result for a depart after search. When using the default sort order the previous set of itineraries is inserted before the current result. 
   * @return previousPageCursor
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PREVIOUS_PAGE_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPreviousPageCursor() {
    return previousPageCursor;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_PAGE_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreviousPageCursor(@jakarta.annotation.Nonnull String previousPageCursor) {
    this.previousPageCursor = previousPageCursor;
  }

  public Plan200Response nextPageCursor(@jakarta.annotation.Nonnull String nextPageCursor) {
    
    this.nextPageCursor = nextPageCursor;
    return this;
  }

  /**
   * Use the cursor to get the next page of results. Insert the cursor into the request and post it to get the next page. The next page is a set of itineraries departing AFTER the last itinerary in this result. 
   * @return nextPageCursor
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNextPageCursor() {
    return nextPageCursor;
  }


  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNextPageCursor(@jakarta.annotation.Nonnull String nextPageCursor) {
    this.nextPageCursor = nextPageCursor;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Plan200Response plan200Response = (Plan200Response) o;
    return Objects.equals(this.requestParameters, plan200Response.requestParameters) &&
        Objects.equals(this.debugOutput, plan200Response.debugOutput) &&
        Objects.equals(this.from, plan200Response.from) &&
        Objects.equals(this.to, plan200Response.to) &&
        Objects.equals(this.direct, plan200Response.direct) &&
        Objects.equals(this.itineraries, plan200Response.itineraries) &&
        Objects.equals(this.previousPageCursor, plan200Response.previousPageCursor) &&
        Objects.equals(this.nextPageCursor, plan200Response.nextPageCursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestParameters, debugOutput, from, to, direct, itineraries, previousPageCursor, nextPageCursor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Plan200Response {\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("    debugOutput: ").append(toIndentedString(debugOutput)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    direct: ").append(toIndentedString(direct)).append("\n");
    sb.append("    itineraries: ").append(toIndentedString(itineraries)).append("\n");
    sb.append("    previousPageCursor: ").append(toIndentedString(previousPageCursor)).append("\n");
    sb.append("    nextPageCursor: ").append(toIndentedString(nextPageCursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

