/*
 * MOTIS API
 * This is the MOTIS routing API.
 *
 * The version of the OpenAPI document: v4
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bileto.motis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.bileto.motis.client.model.Place;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Place reachable by One-to-All
 */
@JsonPropertyOrder({
  ReachablePlace.JSON_PROPERTY_PLACE,
  ReachablePlace.JSON_PROPERTY_DURATION,
  ReachablePlace.JSON_PROPERTY_K
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class ReachablePlace {
  public static final String JSON_PROPERTY_PLACE = "place";
  @jakarta.annotation.Nullable
  private Place place;

  public static final String JSON_PROPERTY_DURATION = "duration";
  @jakarta.annotation.Nullable
  private Integer duration;

  public static final String JSON_PROPERTY_K = "k";
  @jakarta.annotation.Nullable
  private Integer k;

  public ReachablePlace() {
  }

  public ReachablePlace place(@jakarta.annotation.Nullable Place place) {
    
    this.place = place;
    return this;
  }

  /**
   * Place reached by One-to-All
   * @return place
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Place getPlace() {
    return place;
  }


  @JsonProperty(JSON_PROPERTY_PLACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlace(@jakarta.annotation.Nullable Place place) {
    this.place = place;
  }

  public ReachablePlace duration(@jakarta.annotation.Nullable Integer duration) {
    
    this.duration = duration;
    return this;
  }

  /**
   * Total travel duration
   * @return duration
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDuration() {
    return duration;
  }


  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDuration(@jakarta.annotation.Nullable Integer duration) {
    this.duration = duration;
  }

  public ReachablePlace k(@jakarta.annotation.Nullable Integer k) {
    
    this.k = k;
    return this;
  }

  /**
   * k is the smallest number, for which a journey with the shortest duration and at most k-1 transfers exist. You can think of k as the number of connections used.  In more detail:  k&#x3D;0: No connection, e.g. for the one location k&#x3D;1: Direct connection k&#x3D;2: Connection with 1 transfer 
   * @return k
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_K)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getK() {
    return k;
  }


  @JsonProperty(JSON_PROPERTY_K)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setK(@jakarta.annotation.Nullable Integer k) {
    this.k = k;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReachablePlace reachablePlace = (ReachablePlace) o;
    return Objects.equals(this.place, reachablePlace.place) &&
        Objects.equals(this.duration, reachablePlace.duration) &&
        Objects.equals(this.k, reachablePlace.k);
  }

  @Override
  public int hashCode() {
    return Objects.hash(place, duration, k);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReachablePlace {\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    k: ").append(toIndentedString(k)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

