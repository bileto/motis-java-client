/*
 * MOTIS API
 * This is the MOTIS routing API.
 *
 * The version of the OpenAPI document: v4
 * Contact: felix@triptix.tech
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bileto.motis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RiderCategory
 */
@JsonPropertyOrder({
  RiderCategory.JSON_PROPERTY_RIDER_CATEGORY_NAME,
  RiderCategory.JSON_PROPERTY_IS_DEFAULT_FARE_CATEGORY,
  RiderCategory.JSON_PROPERTY_ELIGIBILITY_URL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class RiderCategory {
  public static final String JSON_PROPERTY_RIDER_CATEGORY_NAME = "riderCategoryName";
  @jakarta.annotation.Nonnull
  private String riderCategoryName;

  public static final String JSON_PROPERTY_IS_DEFAULT_FARE_CATEGORY = "isDefaultFareCategory";
  @jakarta.annotation.Nonnull
  private Boolean isDefaultFareCategory;

  public static final String JSON_PROPERTY_ELIGIBILITY_URL = "eligibilityUrl";
  @jakarta.annotation.Nullable
  private String eligibilityUrl;

  public RiderCategory() {
  }

  public RiderCategory riderCategoryName(@jakarta.annotation.Nonnull String riderCategoryName) {
    
    this.riderCategoryName = riderCategoryName;
    return this;
  }

  /**
   * Rider category name as displayed to the rider.
   * @return riderCategoryName
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RIDER_CATEGORY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRiderCategoryName() {
    return riderCategoryName;
  }


  @JsonProperty(JSON_PROPERTY_RIDER_CATEGORY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRiderCategoryName(@jakarta.annotation.Nonnull String riderCategoryName) {
    this.riderCategoryName = riderCategoryName;
  }

  public RiderCategory isDefaultFareCategory(@jakarta.annotation.Nonnull Boolean isDefaultFareCategory) {
    
    this.isDefaultFareCategory = isDefaultFareCategory;
    return this;
  }

  /**
   * Specifies if this category should be considered the default (i.e. the main category displayed to riders).
   * @return isDefaultFareCategory
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_DEFAULT_FARE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsDefaultFareCategory() {
    return isDefaultFareCategory;
  }


  @JsonProperty(JSON_PROPERTY_IS_DEFAULT_FARE_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsDefaultFareCategory(@jakarta.annotation.Nonnull Boolean isDefaultFareCategory) {
    this.isDefaultFareCategory = isDefaultFareCategory;
  }

  public RiderCategory eligibilityUrl(@jakarta.annotation.Nullable String eligibilityUrl) {
    
    this.eligibilityUrl = eligibilityUrl;
    return this;
  }

  /**
   * URL to a web page providing detailed information about the rider category and/or its eligibility criteria.
   * @return eligibilityUrl
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELIGIBILITY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEligibilityUrl() {
    return eligibilityUrl;
  }


  @JsonProperty(JSON_PROPERTY_ELIGIBILITY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEligibilityUrl(@jakarta.annotation.Nullable String eligibilityUrl) {
    this.eligibilityUrl = eligibilityUrl;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiderCategory riderCategory = (RiderCategory) o;
    return Objects.equals(this.riderCategoryName, riderCategory.riderCategoryName) &&
        Objects.equals(this.isDefaultFareCategory, riderCategory.isDefaultFareCategory) &&
        Objects.equals(this.eligibilityUrl, riderCategory.eligibilityUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(riderCategoryName, isDefaultFareCategory, eligibilityUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiderCategory {\n");
    sb.append("    riderCategoryName: ").append(toIndentedString(riderCategoryName)).append("\n");
    sb.append("    isDefaultFareCategory: ").append(toIndentedString(isDefaultFareCategory)).append("\n");
    sb.append("    eligibilityUrl: ").append(toIndentedString(eligibilityUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

